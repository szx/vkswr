// Autogenerated source file.

# [repr (C)] enum VkImageLayout { VK_IMAGE_LAYOUT_UNDEFINED = 0 , VK_IMAGE_LAYOUT_GENERAL = 1 , VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL = 2 , VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL = 3 , VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL = 4 , VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL = 5 , VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL = 6 , VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL = 7 , VK_IMAGE_LAYOUT_PREINITIALIZED = 8 , }
# [repr (C)] enum VkAttachmentLoadOp { VK_ATTACHMENT_LOAD_OP_LOAD = 0 , VK_ATTACHMENT_LOAD_OP_CLEAR = 1 , VK_ATTACHMENT_LOAD_OP_DONT_CARE = 2 , }
# [repr (C)] enum VkAttachmentStoreOp { VK_ATTACHMENT_STORE_OP_STORE = 0 , VK_ATTACHMENT_STORE_OP_DONT_CARE = 1 , }
# [repr (C)] enum VkImageType { VK_IMAGE_TYPE_1D = 0 , VK_IMAGE_TYPE_2D = 1 , VK_IMAGE_TYPE_3D = 2 , }
# [repr (C)] enum VkImageTiling { VK_IMAGE_TILING_OPTIMAL = 0 , VK_IMAGE_TILING_LINEAR = 1 , }
# [repr (C)] enum VkImageViewType { VK_IMAGE_VIEW_TYPE_1D = 0 , VK_IMAGE_VIEW_TYPE_2D = 1 , VK_IMAGE_VIEW_TYPE_3D = 2 , VK_IMAGE_VIEW_TYPE_CUBE = 3 , VK_IMAGE_VIEW_TYPE_1D_ARRAY = 4 , VK_IMAGE_VIEW_TYPE_2D_ARRAY = 5 , VK_IMAGE_VIEW_TYPE_CUBE_ARRAY = 6 , }
# [repr (C)] enum VkCommandBufferLevel { VK_COMMAND_BUFFER_LEVEL_PRIMARY = 0 , VK_COMMAND_BUFFER_LEVEL_SECONDARY = 1 , }
# [repr (C)] enum VkComponentSwizzle { VK_COMPONENT_SWIZZLE_IDENTITY = 0 , VK_COMPONENT_SWIZZLE_ZERO = 1 , VK_COMPONENT_SWIZZLE_ONE = 2 , VK_COMPONENT_SWIZZLE_R = 3 , VK_COMPONENT_SWIZZLE_G = 4 , VK_COMPONENT_SWIZZLE_B = 5 , VK_COMPONENT_SWIZZLE_A = 6 , }
# [repr (C)] enum VkDescriptorType { VK_DESCRIPTOR_TYPE_SAMPLER = 0 , VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER = 1 , VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE = 2 , VK_DESCRIPTOR_TYPE_STORAGE_IMAGE = 3 , VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER = 4 , VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER = 5 , VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER = 6 , VK_DESCRIPTOR_TYPE_STORAGE_BUFFER = 7 , VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC = 8 , VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC = 9 , VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT = 10 , }
# [repr (C)] enum VkQueryType { VK_QUERY_TYPE_OCCLUSION = 0 , VK_QUERY_TYPE_PIPELINE_STATISTICS = 1 , VK_QUERY_TYPE_TIMESTAMP = 2 , }
# [repr (C)] enum VkBorderColor { VK_BORDER_COLOR_FLOAT_TRANSPARENT_BLACK = 0 , VK_BORDER_COLOR_INT_TRANSPARENT_BLACK = 1 , VK_BORDER_COLOR_FLOAT_OPAQUE_BLACK = 2 , VK_BORDER_COLOR_INT_OPAQUE_BLACK = 3 , VK_BORDER_COLOR_FLOAT_OPAQUE_WHITE = 4 , VK_BORDER_COLOR_INT_OPAQUE_WHITE = 5 , }
# [repr (C)] enum VkPipelineBindPoint { VK_PIPELINE_BIND_POINT_GRAPHICS = 0 , VK_PIPELINE_BIND_POINT_COMPUTE = 1 , }
# [repr (C)] enum VkPipelineCacheHeaderVersion { VK_PIPELINE_CACHE_HEADER_VERSION_ONE = 1 , }

# [repr (C)] enum VkPrimitiveTopology { VK_PRIMITIVE_TOPOLOGY_POINT_LIST = 0 , VK_PRIMITIVE_TOPOLOGY_LINE_LIST = 1 , VK_PRIMITIVE_TOPOLOGY_LINE_STRIP = 2 , VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST = 3 , VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP = 4 , VK_PRIMITIVE_TOPOLOGY_TRIANGLE_FAN = 5 , VK_PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY = 6 , VK_PRIMITIVE_TOPOLOGY_LINE_STRIP_WITH_ADJACENCY = 7 , VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY = 8 , VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY = 9 , VK_PRIMITIVE_TOPOLOGY_PATCH_LIST = 10 , }
# [repr (C)] enum VkSharingMode { VK_SHARING_MODE_EXCLUSIVE = 0 , VK_SHARING_MODE_CONCURRENT = 1 , }
# [repr (C)] enum VkIndexType { VK_INDEX_TYPE_UINT16 = 0 , VK_INDEX_TYPE_UINT32 = 1 , }
# [repr (C)] enum VkFilter { VK_FILTER_NEAREST = 0 , VK_FILTER_LINEAR = 1 , }
# [repr (C)] enum VkSamplerMipmapMode { VK_SAMPLER_MIPMAP_MODE_NEAREST = 0 , VK_SAMPLER_MIPMAP_MODE_LINEAR = 1 , }
# [repr (C)] enum VkSamplerAddressMode { VK_SAMPLER_ADDRESS_MODE_REPEAT = 0 , VK_SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT = 1 , VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE = 2 , VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER = 3 , }
# [repr (C)] enum VkCompareOp { VK_COMPARE_OP_NEVER = 0 , VK_COMPARE_OP_LESS = 1 , VK_COMPARE_OP_EQUAL = 2 , VK_COMPARE_OP_LESS_OR_EQUAL = 3 , VK_COMPARE_OP_GREATER = 4 , VK_COMPARE_OP_NOT_EQUAL = 5 , VK_COMPARE_OP_GREATER_OR_EQUAL = 6 , VK_COMPARE_OP_ALWAYS = 7 , }
# [repr (C)] enum VkPolygonMode { VK_POLYGON_MODE_FILL = 0 , VK_POLYGON_MODE_LINE = 1 , VK_POLYGON_MODE_POINT = 2 , }
# [repr (C)] enum VkFrontFace { VK_FRONT_FACE_COUNTER_CLOCKWISE = 0 , VK_FRONT_FACE_CLOCKWISE = 1 , }
# [repr (C)] enum VkBlendFactor { VK_BLEND_FACTOR_ZERO = 0 , VK_BLEND_FACTOR_ONE = 1 , VK_BLEND_FACTOR_SRC_COLOR = 2 , VK_BLEND_FACTOR_ONE_MINUS_SRC_COLOR = 3 , VK_BLEND_FACTOR_DST_COLOR = 4 , VK_BLEND_FACTOR_ONE_MINUS_DST_COLOR = 5 , VK_BLEND_FACTOR_SRC_ALPHA = 6 , VK_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA = 7 , VK_BLEND_FACTOR_DST_ALPHA = 8 , VK_BLEND_FACTOR_ONE_MINUS_DST_ALPHA = 9 , VK_BLEND_FACTOR_CONSTANT_COLOR = 10 , VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR = 11 , VK_BLEND_FACTOR_CONSTANT_ALPHA = 12 , VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA = 13 , VK_BLEND_FACTOR_SRC_ALPHA_SATURATE = 14 , VK_BLEND_FACTOR_SRC1_COLOR = 15 , VK_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR = 16 , VK_BLEND_FACTOR_SRC1_ALPHA = 17 , VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA = 18 , }
# [repr (C)] enum VkBlendOp { VK_BLEND_OP_ADD = 0 , VK_BLEND_OP_SUBTRACT = 1 , VK_BLEND_OP_REVERSE_SUBTRACT = 2 , VK_BLEND_OP_MIN = 3 , VK_BLEND_OP_MAX = 4 , }
# [repr (C)] enum VkStencilOp { VK_STENCIL_OP_KEEP = 0 , VK_STENCIL_OP_ZERO = 1 , VK_STENCIL_OP_REPLACE = 2 , VK_STENCIL_OP_INCREMENT_AND_CLAMP = 3 , VK_STENCIL_OP_DECREMENT_AND_CLAMP = 4 , VK_STENCIL_OP_INVERT = 5 , VK_STENCIL_OP_INCREMENT_AND_WRAP = 6 , VK_STENCIL_OP_DECREMENT_AND_WRAP = 7 , }
# [repr (C)] enum VkLogicOp { VK_LOGIC_OP_CLEAR = 0 , VK_LOGIC_OP_AND = 1 , VK_LOGIC_OP_AND_REVERSE = 2 , VK_LOGIC_OP_COPY = 3 , VK_LOGIC_OP_AND_INVERTED = 4 , VK_LOGIC_OP_NO_OP = 5 , VK_LOGIC_OP_XOR = 6 , VK_LOGIC_OP_OR = 7 , VK_LOGIC_OP_NOR = 8 , VK_LOGIC_OP_EQUIVALENT = 9 , VK_LOGIC_OP_INVERT = 10 , VK_LOGIC_OP_OR_REVERSE = 11 , VK_LOGIC_OP_COPY_INVERTED = 12 , VK_LOGIC_OP_OR_INVERTED = 13 , VK_LOGIC_OP_NAND = 14 , VK_LOGIC_OP_SET = 15 , }
# [repr (C)] enum VkInternalAllocationType { VK_INTERNAL_ALLOCATION_TYPE_EXECUTABLE = 0 , }
# [repr (C)] enum VkSystemAllocationScope { VK_SYSTEM_ALLOCATION_SCOPE_COMMAND = 0 , VK_SYSTEM_ALLOCATION_SCOPE_OBJECT = 1 , VK_SYSTEM_ALLOCATION_SCOPE_CACHE = 2 , VK_SYSTEM_ALLOCATION_SCOPE_DEVICE = 3 , VK_SYSTEM_ALLOCATION_SCOPE_INSTANCE = 4 , }
# [repr (C)] enum VkPhysicalDeviceType { VK_PHYSICAL_DEVICE_TYPE_OTHER = 0 , VK_PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU = 1 , VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU = 2 , VK_PHYSICAL_DEVICE_TYPE_VIRTUAL_GPU = 3 , VK_PHYSICAL_DEVICE_TYPE_CPU = 4 , }
# [repr (C)] enum VkVertexInputRate { VK_VERTEX_INPUT_RATE_VERTEX = 0 , VK_VERTEX_INPUT_RATE_INSTANCE = 1 , }
# [repr (C)] enum VkFormat { VK_FORMAT_UNDEFINED = 0 , VK_FORMAT_R4G4_UNORM_PACK8 = 1 , VK_FORMAT_R4G4B4A4_UNORM_PACK16 = 2 , VK_FORMAT_B4G4R4A4_UNORM_PACK16 = 3 , VK_FORMAT_R5G6B5_UNORM_PACK16 = 4 , VK_FORMAT_B5G6R5_UNORM_PACK16 = 5 , VK_FORMAT_R5G5B5A1_UNORM_PACK16 = 6 , VK_FORMAT_B5G5R5A1_UNORM_PACK16 = 7 , VK_FORMAT_A1R5G5B5_UNORM_PACK16 = 8 , VK_FORMAT_R8_UNORM = 9 , VK_FORMAT_R8_SNORM = 10 , VK_FORMAT_R8_USCALED = 11 , VK_FORMAT_R8_SSCALED = 12 , VK_FORMAT_R8_UINT = 13 , VK_FORMAT_R8_SINT = 14 , VK_FORMAT_R8_SRGB = 15 , VK_FORMAT_R8G8_UNORM = 16 , VK_FORMAT_R8G8_SNORM = 17 , VK_FORMAT_R8G8_USCALED = 18 , VK_FORMAT_R8G8_SSCALED = 19 , VK_FORMAT_R8G8_UINT = 20 , VK_FORMAT_R8G8_SINT = 21 , VK_FORMAT_R8G8_SRGB = 22 , VK_FORMAT_R8G8B8_UNORM = 23 , VK_FORMAT_R8G8B8_SNORM = 24 , VK_FORMAT_R8G8B8_USCALED = 25 , VK_FORMAT_R8G8B8_SSCALED = 26 , VK_FORMAT_R8G8B8_UINT = 27 , VK_FORMAT_R8G8B8_SINT = 28 , VK_FORMAT_R8G8B8_SRGB = 29 , VK_FORMAT_B8G8R8_UNORM = 30 , VK_FORMAT_B8G8R8_SNORM = 31 , VK_FORMAT_B8G8R8_USCALED = 32 , VK_FORMAT_B8G8R8_SSCALED = 33 , VK_FORMAT_B8G8R8_UINT = 34 , VK_FORMAT_B8G8R8_SINT = 35 , VK_FORMAT_B8G8R8_SRGB = 36 , VK_FORMAT_R8G8B8A8_UNORM = 37 , VK_FORMAT_R8G8B8A8_SNORM = 38 , VK_FORMAT_R8G8B8A8_USCALED = 39 , VK_FORMAT_R8G8B8A8_SSCALED = 40 , VK_FORMAT_R8G8B8A8_UINT = 41 , VK_FORMAT_R8G8B8A8_SINT = 42 , VK_FORMAT_R8G8B8A8_SRGB = 43 , VK_FORMAT_B8G8R8A8_UNORM = 44 , VK_FORMAT_B8G8R8A8_SNORM = 45 , VK_FORMAT_B8G8R8A8_USCALED = 46 , VK_FORMAT_B8G8R8A8_SSCALED = 47 , VK_FORMAT_B8G8R8A8_UINT = 48 , VK_FORMAT_B8G8R8A8_SINT = 49 , VK_FORMAT_B8G8R8A8_SRGB = 50 , VK_FORMAT_A8B8G8R8_UNORM_PACK32 = 51 , VK_FORMAT_A8B8G8R8_SNORM_PACK32 = 52 , VK_FORMAT_A8B8G8R8_USCALED_PACK32 = 53 , VK_FORMAT_A8B8G8R8_SSCALED_PACK32 = 54 , VK_FORMAT_A8B8G8R8_UINT_PACK32 = 55 , VK_FORMAT_A8B8G8R8_SINT_PACK32 = 56 , VK_FORMAT_A8B8G8R8_SRGB_PACK32 = 57 , VK_FORMAT_A2R10G10B10_UNORM_PACK32 = 58 , VK_FORMAT_A2R10G10B10_SNORM_PACK32 = 59 , VK_FORMAT_A2R10G10B10_USCALED_PACK32 = 60 , VK_FORMAT_A2R10G10B10_SSCALED_PACK32 = 61 , VK_FORMAT_A2R10G10B10_UINT_PACK32 = 62 , VK_FORMAT_A2R10G10B10_SINT_PACK32 = 63 , VK_FORMAT_A2B10G10R10_UNORM_PACK32 = 64 , VK_FORMAT_A2B10G10R10_SNORM_PACK32 = 65 , VK_FORMAT_A2B10G10R10_USCALED_PACK32 = 66 , VK_FORMAT_A2B10G10R10_SSCALED_PACK32 = 67 , VK_FORMAT_A2B10G10R10_UINT_PACK32 = 68 , VK_FORMAT_A2B10G10R10_SINT_PACK32 = 69 , VK_FORMAT_R16_UNORM = 70 , VK_FORMAT_R16_SNORM = 71 , VK_FORMAT_R16_USCALED = 72 , VK_FORMAT_R16_SSCALED = 73 , VK_FORMAT_R16_UINT = 74 , VK_FORMAT_R16_SINT = 75 , VK_FORMAT_R16_SFLOAT = 76 , VK_FORMAT_R16G16_UNORM = 77 , VK_FORMAT_R16G16_SNORM = 78 , VK_FORMAT_R16G16_USCALED = 79 , VK_FORMAT_R16G16_SSCALED = 80 , VK_FORMAT_R16G16_UINT = 81 , VK_FORMAT_R16G16_SINT = 82 , VK_FORMAT_R16G16_SFLOAT = 83 , VK_FORMAT_R16G16B16_UNORM = 84 , VK_FORMAT_R16G16B16_SNORM = 85 , VK_FORMAT_R16G16B16_USCALED = 86 , VK_FORMAT_R16G16B16_SSCALED = 87 , VK_FORMAT_R16G16B16_UINT = 88 , VK_FORMAT_R16G16B16_SINT = 89 , VK_FORMAT_R16G16B16_SFLOAT = 90 , VK_FORMAT_R16G16B16A16_UNORM = 91 , VK_FORMAT_R16G16B16A16_SNORM = 92 , VK_FORMAT_R16G16B16A16_USCALED = 93 , VK_FORMAT_R16G16B16A16_SSCALED = 94 , VK_FORMAT_R16G16B16A16_UINT = 95 , VK_FORMAT_R16G16B16A16_SINT = 96 , VK_FORMAT_R16G16B16A16_SFLOAT = 97 , VK_FORMAT_R32_UINT = 98 , VK_FORMAT_R32_SINT = 99 , VK_FORMAT_R32_SFLOAT = 100 , VK_FORMAT_R32G32_UINT = 101 , VK_FORMAT_R32G32_SINT = 102 , VK_FORMAT_R32G32_SFLOAT = 103 , VK_FORMAT_R32G32B32_UINT = 104 , VK_FORMAT_R32G32B32_SINT = 105 , VK_FORMAT_R32G32B32_SFLOAT = 106 , VK_FORMAT_R32G32B32A32_UINT = 107 , VK_FORMAT_R32G32B32A32_SINT = 108 , VK_FORMAT_R32G32B32A32_SFLOAT = 109 , VK_FORMAT_R64_UINT = 110 , VK_FORMAT_R64_SINT = 111 , VK_FORMAT_R64_SFLOAT = 112 , VK_FORMAT_R64G64_UINT = 113 , VK_FORMAT_R64G64_SINT = 114 , VK_FORMAT_R64G64_SFLOAT = 115 , VK_FORMAT_R64G64B64_UINT = 116 , VK_FORMAT_R64G64B64_SINT = 117 , VK_FORMAT_R64G64B64_SFLOAT = 118 , VK_FORMAT_R64G64B64A64_UINT = 119 , VK_FORMAT_R64G64B64A64_SINT = 120 , VK_FORMAT_R64G64B64A64_SFLOAT = 121 , VK_FORMAT_B10G11R11_UFLOAT_PACK32 = 122 , VK_FORMAT_E5B9G9R9_UFLOAT_PACK32 = 123 , VK_FORMAT_D16_UNORM = 124 , VK_FORMAT_X8_D24_UNORM_PACK32 = 125 , VK_FORMAT_D32_SFLOAT = 126 , VK_FORMAT_S8_UINT = 127 , VK_FORMAT_D16_UNORM_S8_UINT = 128 , VK_FORMAT_D24_UNORM_S8_UINT = 129 , VK_FORMAT_D32_SFLOAT_S8_UINT = 130 , VK_FORMAT_BC1_RGB_UNORM_BLOCK = 131 , VK_FORMAT_BC1_RGB_SRGB_BLOCK = 132 , VK_FORMAT_BC1_RGBA_UNORM_BLOCK = 133 , VK_FORMAT_BC1_RGBA_SRGB_BLOCK = 134 , VK_FORMAT_BC2_UNORM_BLOCK = 135 , VK_FORMAT_BC2_SRGB_BLOCK = 136 , VK_FORMAT_BC3_UNORM_BLOCK = 137 , VK_FORMAT_BC3_SRGB_BLOCK = 138 , VK_FORMAT_BC4_UNORM_BLOCK = 139 , VK_FORMAT_BC4_SNORM_BLOCK = 140 , VK_FORMAT_BC5_UNORM_BLOCK = 141 , VK_FORMAT_BC5_SNORM_BLOCK = 142 , VK_FORMAT_BC6H_UFLOAT_BLOCK = 143 , VK_FORMAT_BC6H_SFLOAT_BLOCK = 144 , VK_FORMAT_BC7_UNORM_BLOCK = 145 , VK_FORMAT_BC7_SRGB_BLOCK = 146 , VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK = 147 , VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK = 148 , VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK = 149 , VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK = 150 , VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK = 151 , VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK = 152 , VK_FORMAT_EAC_R11_UNORM_BLOCK = 153 , VK_FORMAT_EAC_R11_SNORM_BLOCK = 154 , VK_FORMAT_EAC_R11G11_UNORM_BLOCK = 155 , VK_FORMAT_EAC_R11G11_SNORM_BLOCK = 156 , VK_FORMAT_ASTC_4x4_UNORM_BLOCK = 157 , VK_FORMAT_ASTC_4x4_SRGB_BLOCK = 158 , VK_FORMAT_ASTC_5x4_UNORM_BLOCK = 159 , VK_FORMAT_ASTC_5x4_SRGB_BLOCK = 160 , VK_FORMAT_ASTC_5x5_UNORM_BLOCK = 161 , VK_FORMAT_ASTC_5x5_SRGB_BLOCK = 162 , VK_FORMAT_ASTC_6x5_UNORM_BLOCK = 163 , VK_FORMAT_ASTC_6x5_SRGB_BLOCK = 164 , VK_FORMAT_ASTC_6x6_UNORM_BLOCK = 165 , VK_FORMAT_ASTC_6x6_SRGB_BLOCK = 166 , VK_FORMAT_ASTC_8x5_UNORM_BLOCK = 167 , VK_FORMAT_ASTC_8x5_SRGB_BLOCK = 168 , VK_FORMAT_ASTC_8x6_UNORM_BLOCK = 169 , VK_FORMAT_ASTC_8x6_SRGB_BLOCK = 170 , VK_FORMAT_ASTC_8x8_UNORM_BLOCK = 171 , VK_FORMAT_ASTC_8x8_SRGB_BLOCK = 172 , VK_FORMAT_ASTC_10x5_UNORM_BLOCK = 173 , VK_FORMAT_ASTC_10x5_SRGB_BLOCK = 174 , VK_FORMAT_ASTC_10x6_UNORM_BLOCK = 175 , VK_FORMAT_ASTC_10x6_SRGB_BLOCK = 176 , VK_FORMAT_ASTC_10x8_UNORM_BLOCK = 177 , VK_FORMAT_ASTC_10x8_SRGB_BLOCK = 178 , VK_FORMAT_ASTC_10x10_UNORM_BLOCK = 179 , VK_FORMAT_ASTC_10x10_SRGB_BLOCK = 180 , VK_FORMAT_ASTC_12x10_UNORM_BLOCK = 181 , VK_FORMAT_ASTC_12x10_SRGB_BLOCK = 182 , VK_FORMAT_ASTC_12x12_UNORM_BLOCK = 183 , VK_FORMAT_ASTC_12x12_SRGB_BLOCK = 184 , }
# [repr (C)] enum VkStructureType { VK_STRUCTURE_TYPE_APPLICATION_INFO = 0 , VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO = 1 , VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO = 2 , VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO = 3 , VK_STRUCTURE_TYPE_SUBMIT_INFO = 4 , VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO = 5 , VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE = 6 , VK_STRUCTURE_TYPE_BIND_SPARSE_INFO = 7 , VK_STRUCTURE_TYPE_FENCE_CREATE_INFO = 8 , VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO = 9 , VK_STRUCTURE_TYPE_EVENT_CREATE_INFO = 10 , VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO = 11 , VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO = 12 , VK_STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO = 13 , VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO = 14 , VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO = 15 , VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO = 16 , VK_STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO = 17 , VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO = 18 , VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO = 19 , VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO = 20 , VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO = 21 , VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO = 22 , VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO = 23 , VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO = 24 , VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO = 25 , VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO = 26 , VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO = 27 , VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO = 28 , VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO = 29 , VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO = 30 , VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO = 31 , VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO = 32 , VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO = 33 , VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO = 34 , VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET = 35 , VK_STRUCTURE_TYPE_COPY_DESCRIPTOR_SET = 36 , VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO = 37 , VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO = 38 , VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO = 39 , VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO = 40 , VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO = 41 , VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO = 42 , VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO = 43 , VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER = 44 , VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER = 45 , VK_STRUCTURE_TYPE_MEMORY_BARRIER = 46 , VK_STRUCTURE_TYPE_LOADER_INSTANCE_CREATE_INFO = 47 , VK_STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO = 48 , }
# [repr (C)] enum VkSubpassContents { VK_SUBPASS_CONTENTS_INLINE = 0 , VK_SUBPASS_CONTENTS_SECONDARY_COMMAND_BUFFERS = 1 , }
# [repr (C)] enum VkResult { VK_SUCCESS = 0 , VK_NOT_READY = 1 , VK_TIMEOUT = 2 , VK_EVENT_SET = 3 , VK_EVENT_RESET = 4 , VK_INCOMPLETE = 5 , VK_ERROR_OUT_OF_HOST_MEMORY = - 1 , VK_ERROR_OUT_OF_DEVICE_MEMORY = - 2 , VK_ERROR_INITIALIZATION_FAILED = - 3 , VK_ERROR_DEVICE_LOST = - 4 , VK_ERROR_MEMORY_MAP_FAILED = - 5 , VK_ERROR_LAYER_NOT_PRESENT = - 6 , VK_ERROR_EXTENSION_NOT_PRESENT = - 7 , VK_ERROR_FEATURE_NOT_PRESENT = - 8 , VK_ERROR_INCOMPATIBLE_DRIVER = - 9 , VK_ERROR_TOO_MANY_OBJECTS = - 10 , VK_ERROR_FORMAT_NOT_SUPPORTED = - 11 , VK_ERROR_FRAGMENTED_POOL = - 12 , VK_ERROR_UNKNOWN = - 13 , }
# [repr (C)] enum VkDynamicState { VK_DYNAMIC_STATE_VIEWPORT = 0 , VK_DYNAMIC_STATE_SCISSOR = 1 , VK_DYNAMIC_STATE_LINE_WIDTH = 2 , VK_DYNAMIC_STATE_DEPTH_BIAS = 3 , VK_DYNAMIC_STATE_BLEND_CONSTANTS = 4 , VK_DYNAMIC_STATE_DEPTH_BOUNDS = 5 , VK_DYNAMIC_STATE_STENCIL_COMPARE_MASK = 6 , VK_DYNAMIC_STATE_STENCIL_WRITE_MASK = 7 , VK_DYNAMIC_STATE_STENCIL_REFERENCE = 8 , }
# [repr (C)] enum VkDescriptorUpdateTemplateType { VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET = 0 , }
# [repr (C)] enum VkObjectType { VK_OBJECT_TYPE_UNKNOWN = 0 , VK_OBJECT_TYPE_INSTANCE = 1 , VK_OBJECT_TYPE_PHYSICAL_DEVICE = 2 , VK_OBJECT_TYPE_DEVICE = 3 , VK_OBJECT_TYPE_QUEUE = 4 , VK_OBJECT_TYPE_SEMAPHORE = 5 , VK_OBJECT_TYPE_COMMAND_BUFFER = 6 , VK_OBJECT_TYPE_FENCE = 7 , VK_OBJECT_TYPE_DEVICE_MEMORY = 8 , VK_OBJECT_TYPE_BUFFER = 9 , VK_OBJECT_TYPE_IMAGE = 10 , VK_OBJECT_TYPE_EVENT = 11 , VK_OBJECT_TYPE_QUERY_POOL = 12 , VK_OBJECT_TYPE_BUFFER_VIEW = 13 , VK_OBJECT_TYPE_IMAGE_VIEW = 14 , VK_OBJECT_TYPE_SHADER_MODULE = 15 , VK_OBJECT_TYPE_PIPELINE_CACHE = 16 , VK_OBJECT_TYPE_PIPELINE_LAYOUT = 17 , VK_OBJECT_TYPE_RENDER_PASS = 18 , VK_OBJECT_TYPE_PIPELINE = 19 , VK_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT = 20 , VK_OBJECT_TYPE_SAMPLER = 21 , VK_OBJECT_TYPE_DESCRIPTOR_POOL = 22 , VK_OBJECT_TYPE_DESCRIPTOR_SET = 23 , VK_OBJECT_TYPE_FRAMEBUFFER = 24 , VK_OBJECT_TYPE_COMMAND_POOL = 25 , }
# [repr (C)] enum VkRayTracingInvocationReorderModeNV { VK_RAY_TRACING_INVOCATION_REORDER_MODE_NONE_NV = 0 , VK_RAY_TRACING_INVOCATION_REORDER_MODE_REORDER_NV = 1 , }
# [repr (C)] enum VkDirectDriverLoadingModeLUNARG { VK_DIRECT_DRIVER_LOADING_MODE_EXCLUSIVE_LUNARG = 0 , VK_DIRECT_DRIVER_LOADING_MODE_INCLUSIVE_LUNARG = 1 , }
# [repr (C)] enum VkQueueFlagBits { VK_QUEUE_GRAPHICS_BIT , VK_QUEUE_COMPUTE_BIT , VK_QUEUE_TRANSFER_BIT , VK_QUEUE_SPARSE_BINDING_BIT , }
# [repr (C)] enum VkCullModeFlagBits { VK_CULL_MODE_NONE = 0 , VK_CULL_MODE_FRONT_BIT , VK_CULL_MODE_BACK_BIT , VK_CULL_MODE_FRONT_AND_BACK = 3 , }


# [repr (C)] enum VkMemoryPropertyFlagBits { VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT , VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT , VK_MEMORY_PROPERTY_HOST_COHERENT_BIT , VK_MEMORY_PROPERTY_HOST_CACHED_BIT , VK_MEMORY_PROPERTY_LAZILY_ALLOCATED_BIT , }
# [repr (C)] enum VkMemoryHeapFlagBits { VK_MEMORY_HEAP_DEVICE_LOCAL_BIT , }
# [repr (C)] enum VkAccessFlagBits { VK_ACCESS_INDIRECT_COMMAND_READ_BIT , VK_ACCESS_INDEX_READ_BIT , VK_ACCESS_VERTEX_ATTRIBUTE_READ_BIT , VK_ACCESS_UNIFORM_READ_BIT , VK_ACCESS_INPUT_ATTACHMENT_READ_BIT , VK_ACCESS_SHADER_READ_BIT , VK_ACCESS_SHADER_WRITE_BIT , VK_ACCESS_COLOR_ATTACHMENT_READ_BIT , VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT , VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_READ_BIT , VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT , VK_ACCESS_TRANSFER_READ_BIT , VK_ACCESS_TRANSFER_WRITE_BIT , VK_ACCESS_HOST_READ_BIT , VK_ACCESS_HOST_WRITE_BIT , VK_ACCESS_MEMORY_READ_BIT , VK_ACCESS_MEMORY_WRITE_BIT , }
# [repr (C)] enum VkBufferUsageFlagBits { VK_BUFFER_USAGE_TRANSFER_SRC_BIT , VK_BUFFER_USAGE_TRANSFER_DST_BIT , VK_BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT , VK_BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT , VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT , VK_BUFFER_USAGE_STORAGE_BUFFER_BIT , VK_BUFFER_USAGE_INDEX_BUFFER_BIT , VK_BUFFER_USAGE_VERTEX_BUFFER_BIT , VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT , }
# [repr (C)] enum VkBufferCreateFlagBits { VK_BUFFER_CREATE_SPARSE_BINDING_BIT , VK_BUFFER_CREATE_SPARSE_RESIDENCY_BIT , VK_BUFFER_CREATE_SPARSE_ALIASED_BIT , }
# [repr (C)] enum VkShaderStageFlagBits { VK_SHADER_STAGE_VERTEX_BIT , VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT , VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT , VK_SHADER_STAGE_GEOMETRY_BIT , VK_SHADER_STAGE_FRAGMENT_BIT , VK_SHADER_STAGE_COMPUTE_BIT , VK_SHADER_STAGE_ALL_GRAPHICS = 31 , VK_SHADER_STAGE_ALL = 2147483647 , }
# [repr (C)] enum VkImageUsageFlagBits { VK_IMAGE_USAGE_TRANSFER_SRC_BIT , VK_IMAGE_USAGE_TRANSFER_DST_BIT , VK_IMAGE_USAGE_SAMPLED_BIT , VK_IMAGE_USAGE_STORAGE_BIT , VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT , VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT , VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT , VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT , }
# [repr (C)] enum VkImageCreateFlagBits { VK_IMAGE_CREATE_SPARSE_BINDING_BIT , VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT , VK_IMAGE_CREATE_SPARSE_ALIASED_BIT , VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT , VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT , }


# [repr (C)] enum VkPipelineCreateFlagBits { VK_PIPELINE_CREATE_DISABLE_OPTIMIZATION_BIT , VK_PIPELINE_CREATE_ALLOW_DERIVATIVES_BIT , VK_PIPELINE_CREATE_DERIVATIVE_BIT , }

# [repr (C)] enum VkColorComponentFlagBits { VK_COLOR_COMPONENT_R_BIT , VK_COLOR_COMPONENT_G_BIT , VK_COLOR_COMPONENT_B_BIT , VK_COLOR_COMPONENT_A_BIT , }
# [repr (C)] enum VkFenceCreateFlagBits { VK_FENCE_CREATE_SIGNALED_BIT , }

# [repr (C)] enum VkFormatFeatureFlagBits { VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT , VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT , VK_FORMAT_FEATURE_STORAGE_IMAGE_ATOMIC_BIT , VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT , VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT , VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_ATOMIC_BIT , VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT , VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT , VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT , VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT , VK_FORMAT_FEATURE_BLIT_SRC_BIT , VK_FORMAT_FEATURE_BLIT_DST_BIT , VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT , }
# [repr (C)] enum VkQueryControlFlagBits { VK_QUERY_CONTROL_PRECISE_BIT , }
# [repr (C)] enum VkQueryResultFlagBits { VK_QUERY_RESULT_64_BIT , VK_QUERY_RESULT_WAIT_BIT , VK_QUERY_RESULT_WITH_AVAILABILITY_BIT , VK_QUERY_RESULT_PARTIAL_BIT , }
# [repr (C)] enum VkCommandBufferUsageFlagBits { VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT , VK_COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT , VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT , }
# [repr (C)] enum VkQueryPipelineStatisticFlagBits { VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_VERTICES_BIT , VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_PRIMITIVES_BIT , VK_QUERY_PIPELINE_STATISTIC_VERTEX_SHADER_INVOCATIONS_BIT , VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_INVOCATIONS_BIT , VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_PRIMITIVES_BIT , VK_QUERY_PIPELINE_STATISTIC_CLIPPING_INVOCATIONS_BIT , VK_QUERY_PIPELINE_STATISTIC_CLIPPING_PRIMITIVES_BIT , VK_QUERY_PIPELINE_STATISTIC_FRAGMENT_SHADER_INVOCATIONS_BIT , VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_CONTROL_SHADER_PATCHES_BIT , VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_EVALUATION_SHADER_INVOCATIONS_BIT , VK_QUERY_PIPELINE_STATISTIC_COMPUTE_SHADER_INVOCATIONS_BIT , }
# [repr (C)] enum VkImageAspectFlagBits { VK_IMAGE_ASPECT_COLOR_BIT , VK_IMAGE_ASPECT_DEPTH_BIT , VK_IMAGE_ASPECT_STENCIL_BIT , VK_IMAGE_ASPECT_METADATA_BIT , }
# [repr (C)] enum VkSparseImageFormatFlagBits { VK_SPARSE_IMAGE_FORMAT_SINGLE_MIPTAIL_BIT , VK_SPARSE_IMAGE_FORMAT_ALIGNED_MIP_SIZE_BIT , VK_SPARSE_IMAGE_FORMAT_NONSTANDARD_BLOCK_SIZE_BIT , }
# [repr (C)] enum VkSparseMemoryBindFlagBits { VK_SPARSE_MEMORY_BIND_METADATA_BIT , }
# [repr (C)] enum VkPipelineStageFlagBits { VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT , VK_PIPELINE_STAGE_DRAW_INDIRECT_BIT , VK_PIPELINE_STAGE_VERTEX_INPUT_BIT , VK_PIPELINE_STAGE_VERTEX_SHADER_BIT , VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT , VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT , VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT , VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT , VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT , VK_PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT , VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT , VK_PIPELINE_STAGE_COMPUTE_SHADER_BIT , VK_PIPELINE_STAGE_TRANSFER_BIT , VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT , VK_PIPELINE_STAGE_HOST_BIT , VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT , VK_PIPELINE_STAGE_ALL_COMMANDS_BIT , }
# [repr (C)] enum VkCommandPoolCreateFlagBits { VK_COMMAND_POOL_CREATE_TRANSIENT_BIT , VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT , }
# [repr (C)] enum VkCommandPoolResetFlagBits { VK_COMMAND_POOL_RESET_RELEASE_RESOURCES_BIT , }
# [repr (C)] enum VkCommandBufferResetFlagBits { VK_COMMAND_BUFFER_RESET_RELEASE_RESOURCES_BIT , }
# [repr (C)] enum VkSampleCountFlagBits { VK_SAMPLE_COUNT_1_BIT , VK_SAMPLE_COUNT_2_BIT , VK_SAMPLE_COUNT_4_BIT , VK_SAMPLE_COUNT_8_BIT , VK_SAMPLE_COUNT_16_BIT , VK_SAMPLE_COUNT_32_BIT , VK_SAMPLE_COUNT_64_BIT , }
# [repr (C)] enum VkAttachmentDescriptionFlagBits { VK_ATTACHMENT_DESCRIPTION_MAY_ALIAS_BIT , }
# [repr (C)] enum VkStencilFaceFlagBits { VK_STENCIL_FACE_FRONT_BIT , VK_STENCIL_FACE_BACK_BIT , VK_STENCIL_FACE_FRONT_AND_BACK = 3 , } impl VkStencilFaceFlagBits { pub const VK_STENCIL_FRONT_AND_BACK : VkStencilFaceFlagBits = VkStencilFaceFlagBits :: VK_STENCIL_FACE_FRONT_AND_BACK ; }
# [repr (C)] enum VkDescriptorPoolCreateFlagBits { VK_DESCRIPTOR_POOL_CREATE_FREE_DESCRIPTOR_SET_BIT , }
# [repr (C)] enum VkDependencyFlagBits { VK_DEPENDENCY_BY_REGION_BIT , }
# [repr (C)] enum VkSemaphoreType { VK_SEMAPHORE_TYPE_BINARY = 0 , VK_SEMAPHORE_TYPE_TIMELINE = 1 , }
# [repr (C)] enum VkSemaphoreWaitFlagBits { VK_SEMAPHORE_WAIT_ANY_BIT , }
# [repr (C)] enum VkPresentModeKHR { VK_PRESENT_MODE_IMMEDIATE_KHR = 0 , VK_PRESENT_MODE_MAILBOX_KHR = 1 , VK_PRESENT_MODE_FIFO_KHR = 2 , VK_PRESENT_MODE_FIFO_RELAXED_KHR = 3 , }
# [repr (C)] enum VkColorSpaceKHR { VK_COLOR_SPACE_SRGB_NONLINEAR_KHR = 0 , } impl VkColorSpaceKHR { pub const VK_COLORSPACE_SRGB_NONLINEAR_KHR : VkColorSpaceKHR = VkColorSpaceKHR :: VK_COLOR_SPACE_SRGB_NONLINEAR_KHR ; }
# [repr (C)] enum VkDisplayPlaneAlphaFlagBitsKHR { VK_DISPLAY_PLANE_ALPHA_OPAQUE_BIT_KHR , VK_DISPLAY_PLANE_ALPHA_GLOBAL_BIT_KHR , VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_BIT_KHR , VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_PREMULTIPLIED_BIT_KHR , }
# [repr (C)] enum VkCompositeAlphaFlagBitsKHR { VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR , VK_COMPOSITE_ALPHA_PRE_MULTIPLIED_BIT_KHR , VK_COMPOSITE_ALPHA_POST_MULTIPLIED_BIT_KHR , VK_COMPOSITE_ALPHA_INHERIT_BIT_KHR , }
# [repr (C)] enum VkSurfaceTransformFlagBitsKHR { VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR , VK_SURFACE_TRANSFORM_ROTATE_90_BIT_KHR , VK_SURFACE_TRANSFORM_ROTATE_180_BIT_KHR , VK_SURFACE_TRANSFORM_ROTATE_270_BIT_KHR , VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_BIT_KHR , VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_90_BIT_KHR , VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_180_BIT_KHR , VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_270_BIT_KHR , VK_SURFACE_TRANSFORM_INHERIT_BIT_KHR , }
# [repr (C)] enum VkSwapchainImageUsageFlagBitsANDROID { VK_SWAPCHAIN_IMAGE_USAGE_SHARED_BIT_ANDROID , }
# [repr (C)] enum VkTimeDomainEXT { VK_TIME_DOMAIN_DEVICE_EXT = 0 , VK_TIME_DOMAIN_CLOCK_MONOTONIC_EXT = 1 , VK_TIME_DOMAIN_CLOCK_MONOTONIC_RAW_EXT = 2 , VK_TIME_DOMAIN_QUERY_PERFORMANCE_COUNTER_EXT = 3 , }
# [repr (C)] enum VkDebugReportFlagBitsEXT { VK_DEBUG_REPORT_INFORMATION_BIT_EXT , VK_DEBUG_REPORT_WARNING_BIT_EXT , VK_DEBUG_REPORT_PERFORMANCE_WARNING_BIT_EXT , VK_DEBUG_REPORT_ERROR_BIT_EXT , VK_DEBUG_REPORT_DEBUG_BIT_EXT , }
# [repr (C)] enum VkDebugReportObjectTypeEXT { VK_DEBUG_REPORT_OBJECT_TYPE_UNKNOWN_EXT = 0 , VK_DEBUG_REPORT_OBJECT_TYPE_INSTANCE_EXT = 1 , VK_DEBUG_REPORT_OBJECT_TYPE_PHYSICAL_DEVICE_EXT = 2 , VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_EXT = 3 , VK_DEBUG_REPORT_OBJECT_TYPE_QUEUE_EXT = 4 , VK_DEBUG_REPORT_OBJECT_TYPE_SEMAPHORE_EXT = 5 , VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_BUFFER_EXT = 6 , VK_DEBUG_REPORT_OBJECT_TYPE_FENCE_EXT = 7 , VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_MEMORY_EXT = 8 , VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_EXT = 9 , VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_EXT = 10 , VK_DEBUG_REPORT_OBJECT_TYPE_EVENT_EXT = 11 , VK_DEBUG_REPORT_OBJECT_TYPE_QUERY_POOL_EXT = 12 , VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_VIEW_EXT = 13 , VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_VIEW_EXT = 14 , VK_DEBUG_REPORT_OBJECT_TYPE_SHADER_MODULE_EXT = 15 , VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_CACHE_EXT = 16 , VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_LAYOUT_EXT = 17 , VK_DEBUG_REPORT_OBJECT_TYPE_RENDER_PASS_EXT = 18 , VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_EXT = 19 , VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT_EXT = 20 , VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_EXT = 21 , VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_POOL_EXT = 22 , VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_EXT = 23 , VK_DEBUG_REPORT_OBJECT_TYPE_FRAMEBUFFER_EXT = 24 , VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_POOL_EXT = 25 , VK_DEBUG_REPORT_OBJECT_TYPE_SURFACE_KHR_EXT = 26 , VK_DEBUG_REPORT_OBJECT_TYPE_SWAPCHAIN_KHR_EXT = 27 , VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT_EXT = 28 , VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_KHR_EXT = 29 , VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_MODE_KHR_EXT = 30 , VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT_EXT = 33 , } impl VkDebugReportObjectTypeEXT { pub const VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_EXT : VkDebugReportObjectTypeEXT = VkDebugReportObjectTypeEXT :: VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT_EXT ; } impl VkDebugReportObjectTypeEXT { pub const VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT : VkDebugReportObjectTypeEXT = VkDebugReportObjectTypeEXT :: VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT_EXT ; }
# [repr (C)] enum VkDeviceMemoryReportEventTypeEXT { VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_ALLOCATE_EXT = 0 , VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_FREE_EXT = 1 , VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_IMPORT_EXT = 2 , VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_UNIMPORT_EXT = 3 , VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_ALLOCATION_FAILED_EXT = 4 , }
# [repr (C)] enum VkRasterizationOrderAMD { VK_RASTERIZATION_ORDER_STRICT_AMD = 0 , VK_RASTERIZATION_ORDER_RELAXED_AMD = 1 , }
# [repr (C)] enum VkExternalMemoryHandleTypeFlagBitsNV { VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_NV , VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_NV , VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_BIT_NV , VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_KMT_BIT_NV , }
# [repr (C)] enum VkExternalMemoryFeatureFlagBitsNV { VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_NV , VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_NV , VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_NV , }
# [repr (C)] enum VkValidationCheckEXT { VK_VALIDATION_CHECK_ALL_EXT = 0 , VK_VALIDATION_CHECK_SHADERS_EXT = 1 , }
# [repr (C)] enum VkValidationFeatureEnableEXT { VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_EXT = 0 , VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_RESERVE_BINDING_SLOT_EXT = 1 , VK_VALIDATION_FEATURE_ENABLE_BEST_PRACTICES_EXT = 2 , VK_VALIDATION_FEATURE_ENABLE_DEBUG_PRINTF_EXT = 3 , VK_VALIDATION_FEATURE_ENABLE_SYNCHRONIZATION_VALIDATION_EXT = 4 , }
# [repr (C)] enum VkValidationFeatureDisableEXT { VK_VALIDATION_FEATURE_DISABLE_ALL_EXT = 0 , VK_VALIDATION_FEATURE_DISABLE_SHADERS_EXT = 1 , VK_VALIDATION_FEATURE_DISABLE_THREAD_SAFETY_EXT = 2 , VK_VALIDATION_FEATURE_DISABLE_API_PARAMETERS_EXT = 3 , VK_VALIDATION_FEATURE_DISABLE_OBJECT_LIFETIMES_EXT = 4 , VK_VALIDATION_FEATURE_DISABLE_CORE_CHECKS_EXT = 5 , VK_VALIDATION_FEATURE_DISABLE_UNIQUE_HANDLES_EXT = 6 , VK_VALIDATION_FEATURE_DISABLE_SHADER_VALIDATION_CACHE_EXT = 7 , }
# [repr (C)] enum VkSubgroupFeatureFlagBits { VK_SUBGROUP_FEATURE_BASIC_BIT , VK_SUBGROUP_FEATURE_VOTE_BIT , VK_SUBGROUP_FEATURE_ARITHMETIC_BIT , VK_SUBGROUP_FEATURE_BALLOT_BIT , VK_SUBGROUP_FEATURE_SHUFFLE_BIT , VK_SUBGROUP_FEATURE_SHUFFLE_RELATIVE_BIT , VK_SUBGROUP_FEATURE_CLUSTERED_BIT , VK_SUBGROUP_FEATURE_QUAD_BIT , }
# [repr (C)] enum VkIndirectCommandsLayoutUsageFlagBitsNV { VK_INDIRECT_COMMANDS_LAYOUT_USAGE_EXPLICIT_PREPROCESS_BIT_NV , VK_INDIRECT_COMMANDS_LAYOUT_USAGE_INDEXED_SEQUENCES_BIT_NV , VK_INDIRECT_COMMANDS_LAYOUT_USAGE_UNORDERED_SEQUENCES_BIT_NV , }
# [repr (C)] enum VkIndirectStateFlagBitsNV { VK_INDIRECT_STATE_FLAG_FRONTFACE_BIT_NV , }
# [repr (C)] enum VkIndirectCommandsTokenTypeNV { VK_INDIRECT_COMMANDS_TOKEN_TYPE_SHADER_GROUP_NV = 0 , VK_INDIRECT_COMMANDS_TOKEN_TYPE_STATE_FLAGS_NV = 1 , VK_INDIRECT_COMMANDS_TOKEN_TYPE_INDEX_BUFFER_NV = 2 , VK_INDIRECT_COMMANDS_TOKEN_TYPE_VERTEX_BUFFER_NV = 3 , VK_INDIRECT_COMMANDS_TOKEN_TYPE_PUSH_CONSTANT_NV = 4 , VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_INDEXED_NV = 5 , VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_NV = 6 , VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_TASKS_NV = 7 , }


# [repr (C)] enum VkExternalMemoryHandleTypeFlagBits { VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT , VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT , VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT , VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT , VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT , VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT , VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT , }
# [repr (C)] enum VkExternalMemoryFeatureFlagBits { VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT , VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT , VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT , }
# [repr (C)] enum VkExternalSemaphoreHandleTypeFlagBits { VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT , VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT , VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT , VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT , VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT , } impl VkExternalSemaphoreHandleTypeFlagBits { pub const VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D11_FENCE_BIT : VkExternalSemaphoreHandleTypeFlagBits = VkExternalSemaphoreHandleTypeFlagBits :: VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT ; }
# [repr (C)] enum VkExternalSemaphoreFeatureFlagBits { VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT , VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT , }
# [repr (C)] enum VkSemaphoreImportFlagBits { VK_SEMAPHORE_IMPORT_TEMPORARY_BIT , }
# [repr (C)] enum VkExternalFenceHandleTypeFlagBits { VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT , VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT , VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT , VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT , }
# [repr (C)] enum VkExternalFenceFeatureFlagBits { VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT , VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT , }
# [repr (C)] enum VkFenceImportFlagBits { VK_FENCE_IMPORT_TEMPORARY_BIT , }
# [repr (C)] enum VkSurfaceCounterFlagBitsEXT { VK_SURFACE_COUNTER_VBLANK_BIT_EXT , } impl VkSurfaceCounterFlagBitsEXT { pub const VK_SURFACE_COUNTER_VBLANK_EXT : VkSurfaceCounterFlagBitsEXT = VkSurfaceCounterFlagBitsEXT :: VK_SURFACE_COUNTER_VBLANK_BIT_EXT ; }
# [repr (C)] enum VkDisplayPowerStateEXT { VK_DISPLAY_POWER_STATE_OFF_EXT = 0 , VK_DISPLAY_POWER_STATE_SUSPEND_EXT = 1 , VK_DISPLAY_POWER_STATE_ON_EXT = 2 , }
# [repr (C)] enum VkDeviceEventTypeEXT { VK_DEVICE_EVENT_TYPE_DISPLAY_HOTPLUG_EXT = 0 , }
# [repr (C)] enum VkDisplayEventTypeEXT { VK_DISPLAY_EVENT_TYPE_FIRST_PIXEL_OUT_EXT = 0 , }
# [repr (C)] enum VkPeerMemoryFeatureFlagBits { VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT , VK_PEER_MEMORY_FEATURE_COPY_DST_BIT , VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT , VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT , }
# [repr (C)] enum VkMemoryAllocateFlagBits { VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT , }
# [repr (C)] enum VkDeviceGroupPresentModeFlagBitsKHR { VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_BIT_KHR , VK_DEVICE_GROUP_PRESENT_MODE_REMOTE_BIT_KHR , VK_DEVICE_GROUP_PRESENT_MODE_SUM_BIT_KHR , VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_MULTI_DEVICE_BIT_KHR , }

# [repr (C)] enum VkViewportCoordinateSwizzleNV { VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_X_NV = 0 , VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_X_NV = 1 , VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Y_NV = 2 , VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Y_NV = 3 , VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Z_NV = 4 , VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Z_NV = 5 , VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_W_NV = 6 , VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_W_NV = 7 , }
# [repr (C)] enum VkDiscardRectangleModeEXT { VK_DISCARD_RECTANGLE_MODE_INCLUSIVE_EXT = 0 , VK_DISCARD_RECTANGLE_MODE_EXCLUSIVE_EXT = 1 , }

# [repr (C)] enum VkPointClippingBehavior { VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES = 0 , VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY = 1 , }
# [repr (C)] enum VkSamplerReductionMode { VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE = 0 , VK_SAMPLER_REDUCTION_MODE_MIN = 1 , VK_SAMPLER_REDUCTION_MODE_MAX = 2 , }
# [repr (C)] enum VkTessellationDomainOrigin { VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT = 0 , VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT = 1 , }
# [repr (C)] enum VkSamplerYcbcrModelConversion { VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY = 0 , VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY = 1 , VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709 = 2 , VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601 = 3 , VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020 = 4 , }
# [repr (C)] enum VkSamplerYcbcrRange { VK_SAMPLER_YCBCR_RANGE_ITU_FULL = 0 , VK_SAMPLER_YCBCR_RANGE_ITU_NARROW = 1 , }
# [repr (C)] enum VkChromaLocation { VK_CHROMA_LOCATION_COSITED_EVEN = 0 , VK_CHROMA_LOCATION_MIDPOINT = 1 , }
# [repr (C)] enum VkBlendOverlapEXT { VK_BLEND_OVERLAP_UNCORRELATED_EXT = 0 , VK_BLEND_OVERLAP_DISJOINT_EXT = 1 , VK_BLEND_OVERLAP_CONJOINT_EXT = 2 , }
# [repr (C)] enum VkCoverageModulationModeNV { VK_COVERAGE_MODULATION_MODE_NONE_NV = 0 , VK_COVERAGE_MODULATION_MODE_RGB_NV = 1 , VK_COVERAGE_MODULATION_MODE_ALPHA_NV = 2 , VK_COVERAGE_MODULATION_MODE_RGBA_NV = 3 , }
# [repr (C)] enum VkCoverageReductionModeNV { VK_COVERAGE_REDUCTION_MODE_MERGE_NV = 0 , VK_COVERAGE_REDUCTION_MODE_TRUNCATE_NV = 1 , }
# [repr (C)] enum VkValidationCacheHeaderVersionEXT { VK_VALIDATION_CACHE_HEADER_VERSION_ONE_EXT = 1 , }
# [repr (C)] enum VkShaderInfoTypeAMD { VK_SHADER_INFO_TYPE_STATISTICS_AMD = 0 , VK_SHADER_INFO_TYPE_BINARY_AMD = 1 , VK_SHADER_INFO_TYPE_DISASSEMBLY_AMD = 2 , }
# [repr (C)] enum VkQueueGlobalPriorityKHR { VK_QUEUE_GLOBAL_PRIORITY_LOW_KHR = 128 , VK_QUEUE_GLOBAL_PRIORITY_MEDIUM_KHR = 256 , VK_QUEUE_GLOBAL_PRIORITY_HIGH_KHR = 512 , VK_QUEUE_GLOBAL_PRIORITY_REALTIME_KHR = 1024 , } impl VkQueueGlobalPriorityKHR { pub const VK_QUEUE_GLOBAL_PRIORITY_LOW_EXT : VkQueueGlobalPriorityKHR = VkQueueGlobalPriorityKHR :: VK_QUEUE_GLOBAL_PRIORITY_LOW_KHR ; } impl VkQueueGlobalPriorityKHR { pub const VK_QUEUE_GLOBAL_PRIORITY_MEDIUM_EXT : VkQueueGlobalPriorityKHR = VkQueueGlobalPriorityKHR :: VK_QUEUE_GLOBAL_PRIORITY_MEDIUM_KHR ; } impl VkQueueGlobalPriorityKHR { pub const VK_QUEUE_GLOBAL_PRIORITY_HIGH_EXT : VkQueueGlobalPriorityKHR = VkQueueGlobalPriorityKHR :: VK_QUEUE_GLOBAL_PRIORITY_HIGH_KHR ; } impl VkQueueGlobalPriorityKHR { pub const VK_QUEUE_GLOBAL_PRIORITY_REALTIME_EXT : VkQueueGlobalPriorityKHR = VkQueueGlobalPriorityKHR :: VK_QUEUE_GLOBAL_PRIORITY_REALTIME_KHR ; }
# [repr (C)] enum VkDebugUtilsMessageSeverityFlagBitsEXT { VK_DEBUG_UTILS_MESSAGE_SEVERITY_VERBOSE_BIT_EXT , VK_DEBUG_UTILS_MESSAGE_SEVERITY_INFO_BIT_EXT , VK_DEBUG_UTILS_MESSAGE_SEVERITY_WARNING_BIT_EXT , VK_DEBUG_UTILS_MESSAGE_SEVERITY_ERROR_BIT_EXT , }
# [repr (C)] enum VkDebugUtilsMessageTypeFlagBitsEXT { VK_DEBUG_UTILS_MESSAGE_TYPE_GENERAL_BIT_EXT , VK_DEBUG_UTILS_MESSAGE_TYPE_VALIDATION_BIT_EXT , VK_DEBUG_UTILS_MESSAGE_TYPE_PERFORMANCE_BIT_EXT , }
# [repr (C)] enum VkConservativeRasterizationModeEXT { VK_CONSERVATIVE_RASTERIZATION_MODE_DISABLED_EXT = 0 , VK_CONSERVATIVE_RASTERIZATION_MODE_OVERESTIMATE_EXT = 1 , VK_CONSERVATIVE_RASTERIZATION_MODE_UNDERESTIMATE_EXT = 2 , }
# [repr (C)] enum VkDescriptorBindingFlagBits { VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT , VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT , VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT , VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT , }
# [repr (C)] enum VkVendorId { VK_VENDOR_ID_VIV = 65537 , VK_VENDOR_ID_VSI = 65538 , VK_VENDOR_ID_KAZAN = 65539 , VK_VENDOR_ID_CODEPLAY = 65540 , VK_VENDOR_ID_MESA = 65541 , VK_VENDOR_ID_POCL = 65542 , VK_VENDOR_ID_MOBILEYE = 65543 , }
# [repr (C)] enum VkDriverId { VK_DRIVER_ID_AMD_PROPRIETARY = 1 , VK_DRIVER_ID_AMD_OPEN_SOURCE = 2 , VK_DRIVER_ID_MESA_RADV = 3 , VK_DRIVER_ID_NVIDIA_PROPRIETARY = 4 , VK_DRIVER_ID_INTEL_PROPRIETARY_WINDOWS = 5 , VK_DRIVER_ID_INTEL_OPEN_SOURCE_MESA = 6 , VK_DRIVER_ID_IMAGINATION_PROPRIETARY = 7 , VK_DRIVER_ID_QUALCOMM_PROPRIETARY = 8 , VK_DRIVER_ID_ARM_PROPRIETARY = 9 , VK_DRIVER_ID_GOOGLE_SWIFTSHADER = 10 , VK_DRIVER_ID_GGP_PROPRIETARY = 11 , VK_DRIVER_ID_BROADCOM_PROPRIETARY = 12 , VK_DRIVER_ID_MESA_LLVMPIPE = 13 , VK_DRIVER_ID_MOLTENVK = 14 , VK_DRIVER_ID_COREAVI_PROPRIETARY = 15 , VK_DRIVER_ID_JUICE_PROPRIETARY = 16 , VK_DRIVER_ID_VERISILICON_PROPRIETARY = 17 , VK_DRIVER_ID_MESA_TURNIP = 18 , VK_DRIVER_ID_MESA_V3DV = 19 , VK_DRIVER_ID_MESA_PANVK = 20 , VK_DRIVER_ID_SAMSUNG_PROPRIETARY = 21 , VK_DRIVER_ID_MESA_VENUS = 22 , VK_DRIVER_ID_MESA_DOZEN = 23 , VK_DRIVER_ID_MESA_NVK = 24 , VK_DRIVER_ID_IMAGINATION_OPEN_SOURCE_MESA = 25 , }
# [repr (C)] enum VkConditionalRenderingFlagBitsEXT { VK_CONDITIONAL_RENDERING_INVERTED_BIT_EXT , }
# [repr (C)] enum VkResolveModeFlagBits { VK_RESOLVE_MODE_NONE = 0 , VK_RESOLVE_MODE_SAMPLE_ZERO_BIT , VK_RESOLVE_MODE_AVERAGE_BIT , VK_RESOLVE_MODE_MIN_BIT , VK_RESOLVE_MODE_MAX_BIT , }
# [repr (C)] enum VkShadingRatePaletteEntryNV { VK_SHADING_RATE_PALETTE_ENTRY_NO_INVOCATIONS_NV = 0 , VK_SHADING_RATE_PALETTE_ENTRY_16_INVOCATIONS_PER_PIXEL_NV = 1 , VK_SHADING_RATE_PALETTE_ENTRY_8_INVOCATIONS_PER_PIXEL_NV = 2 , VK_SHADING_RATE_PALETTE_ENTRY_4_INVOCATIONS_PER_PIXEL_NV = 3 , VK_SHADING_RATE_PALETTE_ENTRY_2_INVOCATIONS_PER_PIXEL_NV = 4 , VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_PIXEL_NV = 5 , VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X1_PIXELS_NV = 6 , VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_1X2_PIXELS_NV = 7 , VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X2_PIXELS_NV = 8 , VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X2_PIXELS_NV = 9 , VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X4_PIXELS_NV = 10 , VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X4_PIXELS_NV = 11 , }
# [repr (C)] enum VkCoarseSampleOrderTypeNV { VK_COARSE_SAMPLE_ORDER_TYPE_DEFAULT_NV = 0 , VK_COARSE_SAMPLE_ORDER_TYPE_CUSTOM_NV = 1 , VK_COARSE_SAMPLE_ORDER_TYPE_PIXEL_MAJOR_NV = 2 , VK_COARSE_SAMPLE_ORDER_TYPE_SAMPLE_MAJOR_NV = 3 , }
# [repr (C)] enum VkGeometryInstanceFlagBitsKHR { VK_GEOMETRY_INSTANCE_TRIANGLE_FACING_CULL_DISABLE_BIT_KHR , VK_GEOMETRY_INSTANCE_TRIANGLE_FLIP_FACING_BIT_KHR , VK_GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_KHR , VK_GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_KHR , } impl VkGeometryInstanceFlagBitsKHR { pub const VK_GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_KHR : VkGeometryInstanceFlagBitsKHR = VkGeometryInstanceFlagBitsKHR :: VK_GEOMETRY_INSTANCE_TRIANGLE_FLIP_FACING_BIT_KHR ; }
# [repr (C)] enum VkGeometryFlagBitsKHR { VK_GEOMETRY_OPAQUE_BIT_KHR , VK_GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_KHR , }
# [repr (C)] enum VkBuildAccelerationStructureFlagBitsKHR { VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_KHR , VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_KHR , VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_KHR , VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_KHR , VK_BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_KHR , }
# [repr (C)] enum VkAccelerationStructureCreateFlagBitsKHR { VK_ACCELERATION_STRUCTURE_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR , }
# [repr (C)] enum VkCopyAccelerationStructureModeKHR { VK_COPY_ACCELERATION_STRUCTURE_MODE_CLONE_KHR = 0 , VK_COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_KHR = 1 , VK_COPY_ACCELERATION_STRUCTURE_MODE_SERIALIZE_KHR = 2 , VK_COPY_ACCELERATION_STRUCTURE_MODE_DESERIALIZE_KHR = 3 , }
# [repr (C)] enum VkBuildAccelerationStructureModeKHR { VK_BUILD_ACCELERATION_STRUCTURE_MODE_BUILD_KHR = 0 , VK_BUILD_ACCELERATION_STRUCTURE_MODE_UPDATE_KHR = 1 , }
# [repr (C)] enum VkAccelerationStructureTypeKHR { VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_KHR = 0 , VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_KHR = 1 , VK_ACCELERATION_STRUCTURE_TYPE_GENERIC_KHR = 2 , }
# [repr (C)] enum VkGeometryTypeKHR { VK_GEOMETRY_TYPE_TRIANGLES_KHR = 0 , VK_GEOMETRY_TYPE_AABBS_KHR = 1 , VK_GEOMETRY_TYPE_INSTANCES_KHR = 2 , }
# [repr (C)] enum VkAccelerationStructureMemoryRequirementsTypeNV { VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_OBJECT_NV = 0 , VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_BUILD_SCRATCH_NV = 1 , VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_UPDATE_SCRATCH_NV = 2 , }
# [repr (C)] enum VkAccelerationStructureBuildTypeKHR { VK_ACCELERATION_STRUCTURE_BUILD_TYPE_HOST_KHR = 0 , VK_ACCELERATION_STRUCTURE_BUILD_TYPE_DEVICE_KHR = 1 , VK_ACCELERATION_STRUCTURE_BUILD_TYPE_HOST_OR_DEVICE_KHR = 2 , }
# [repr (C)] enum VkRayTracingShaderGroupTypeKHR { VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_KHR = 0 , VK_RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_KHR = 1 , VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_KHR = 2 , }
# [repr (C)] enum VkAccelerationStructureCompatibilityKHR { VK_ACCELERATION_STRUCTURE_COMPATIBILITY_COMPATIBLE_KHR = 0 , VK_ACCELERATION_STRUCTURE_COMPATIBILITY_INCOMPATIBLE_KHR = 1 , }
# [repr (C)] enum VkShaderGroupShaderKHR { VK_SHADER_GROUP_SHADER_GENERAL_KHR = 0 , VK_SHADER_GROUP_SHADER_CLOSEST_HIT_KHR = 1 , VK_SHADER_GROUP_SHADER_ANY_HIT_KHR = 2 , VK_SHADER_GROUP_SHADER_INTERSECTION_KHR = 3 , }
# [repr (C)] enum VkMemoryOverallocationBehaviorAMD { VK_MEMORY_OVERALLOCATION_BEHAVIOR_DEFAULT_AMD = 0 , VK_MEMORY_OVERALLOCATION_BEHAVIOR_ALLOWED_AMD = 1 , VK_MEMORY_OVERALLOCATION_BEHAVIOR_DISALLOWED_AMD = 2 , }

# [repr (C)] enum VkScopeNV { VK_SCOPE_DEVICE_NV = 1 , VK_SCOPE_WORKGROUP_NV = 2 , VK_SCOPE_SUBGROUP_NV = 3 , VK_SCOPE_QUEUE_FAMILY_NV = 5 , }
# [repr (C)] enum VkComponentTypeNV { VK_COMPONENT_TYPE_FLOAT16_NV = 0 , VK_COMPONENT_TYPE_FLOAT32_NV = 1 , VK_COMPONENT_TYPE_FLOAT64_NV = 2 , VK_COMPONENT_TYPE_SINT8_NV = 3 , VK_COMPONENT_TYPE_SINT16_NV = 4 , VK_COMPONENT_TYPE_SINT32_NV = 5 , VK_COMPONENT_TYPE_SINT64_NV = 6 , VK_COMPONENT_TYPE_UINT8_NV = 7 , VK_COMPONENT_TYPE_UINT16_NV = 8 , VK_COMPONENT_TYPE_UINT32_NV = 9 , VK_COMPONENT_TYPE_UINT64_NV = 10 , }
# [repr (C)] enum VkDeviceDiagnosticsConfigFlagBitsNV { VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_SHADER_DEBUG_INFO_BIT_NV , VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_RESOURCE_TRACKING_BIT_NV , VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_AUTOMATIC_CHECKPOINTS_BIT_NV , VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_SHADER_ERROR_REPORTING_BIT_NV , }
# [repr (C)] enum VkPipelineCreationFeedbackFlagBits { VK_PIPELINE_CREATION_FEEDBACK_VALID_BIT , VK_PIPELINE_CREATION_FEEDBACK_APPLICATION_PIPELINE_CACHE_HIT_BIT , VK_PIPELINE_CREATION_FEEDBACK_BASE_PIPELINE_ACCELERATION_BIT , } impl VkPipelineCreationFeedbackFlagBits { pub const VK_PIPELINE_CREATION_FEEDBACK_VALID_BIT_EXT : VkPipelineCreationFeedbackFlagBits = VkPipelineCreationFeedbackFlagBits :: VK_PIPELINE_CREATION_FEEDBACK_VALID_BIT ; } impl VkPipelineCreationFeedbackFlagBits { pub const VK_PIPELINE_CREATION_FEEDBACK_APPLICATION_PIPELINE_CACHE_HIT_BIT_EXT : VkPipelineCreationFeedbackFlagBits = VkPipelineCreationFeedbackFlagBits :: VK_PIPELINE_CREATION_FEEDBACK_APPLICATION_PIPELINE_CACHE_HIT_BIT ; } impl VkPipelineCreationFeedbackFlagBits { pub const VK_PIPELINE_CREATION_FEEDBACK_BASE_PIPELINE_ACCELERATION_BIT_EXT : VkPipelineCreationFeedbackFlagBits = VkPipelineCreationFeedbackFlagBits :: VK_PIPELINE_CREATION_FEEDBACK_BASE_PIPELINE_ACCELERATION_BIT ; }
# [repr (C)] enum VkFullScreenExclusiveEXT { VK_FULL_SCREEN_EXCLUSIVE_DEFAULT_EXT = 0 , VK_FULL_SCREEN_EXCLUSIVE_ALLOWED_EXT = 1 , VK_FULL_SCREEN_EXCLUSIVE_DISALLOWED_EXT = 2 , VK_FULL_SCREEN_EXCLUSIVE_APPLICATION_CONTROLLED_EXT = 3 , }
# [repr (C)] enum VkPerformanceCounterScopeKHR { VK_PERFORMANCE_COUNTER_SCOPE_COMMAND_BUFFER_KHR = 0 , VK_PERFORMANCE_COUNTER_SCOPE_RENDER_PASS_KHR = 1 , VK_PERFORMANCE_COUNTER_SCOPE_COMMAND_KHR = 2 , } impl VkPerformanceCounterScopeKHR { pub const VK_QUERY_SCOPE_COMMAND_BUFFER_KHR : VkPerformanceCounterScopeKHR = VkPerformanceCounterScopeKHR :: VK_PERFORMANCE_COUNTER_SCOPE_COMMAND_BUFFER_KHR ; } impl VkPerformanceCounterScopeKHR { pub const VK_QUERY_SCOPE_RENDER_PASS_KHR : VkPerformanceCounterScopeKHR = VkPerformanceCounterScopeKHR :: VK_PERFORMANCE_COUNTER_SCOPE_RENDER_PASS_KHR ; } impl VkPerformanceCounterScopeKHR { pub const VK_QUERY_SCOPE_COMMAND_KHR : VkPerformanceCounterScopeKHR = VkPerformanceCounterScopeKHR :: VK_PERFORMANCE_COUNTER_SCOPE_COMMAND_KHR ; }
# [repr (C)] enum VkMemoryDecompressionMethodFlagBitsNV { VK_MEMORY_DECOMPRESSION_METHOD_GDEFLATE_1_0_BIT_NV , }
# [repr (C)] enum VkPerformanceCounterUnitKHR { VK_PERFORMANCE_COUNTER_UNIT_GENERIC_KHR = 0 , VK_PERFORMANCE_COUNTER_UNIT_PERCENTAGE_KHR = 1 , VK_PERFORMANCE_COUNTER_UNIT_NANOSECONDS_KHR = 2 , VK_PERFORMANCE_COUNTER_UNIT_BYTES_KHR = 3 , VK_PERFORMANCE_COUNTER_UNIT_BYTES_PER_SECOND_KHR = 4 , VK_PERFORMANCE_COUNTER_UNIT_KELVIN_KHR = 5 , VK_PERFORMANCE_COUNTER_UNIT_WATTS_KHR = 6 , VK_PERFORMANCE_COUNTER_UNIT_VOLTS_KHR = 7 , VK_PERFORMANCE_COUNTER_UNIT_AMPS_KHR = 8 , VK_PERFORMANCE_COUNTER_UNIT_HERTZ_KHR = 9 , VK_PERFORMANCE_COUNTER_UNIT_CYCLES_KHR = 10 , }
# [repr (C)] enum VkPerformanceCounterStorageKHR { VK_PERFORMANCE_COUNTER_STORAGE_INT32_KHR = 0 , VK_PERFORMANCE_COUNTER_STORAGE_INT64_KHR = 1 , VK_PERFORMANCE_COUNTER_STORAGE_UINT32_KHR = 2 , VK_PERFORMANCE_COUNTER_STORAGE_UINT64_KHR = 3 , VK_PERFORMANCE_COUNTER_STORAGE_FLOAT32_KHR = 4 , VK_PERFORMANCE_COUNTER_STORAGE_FLOAT64_KHR = 5 , }
# [repr (C)] enum VkPerformanceCounterDescriptionFlagBitsKHR { VK_PERFORMANCE_COUNTER_DESCRIPTION_PERFORMANCE_IMPACTING_BIT_KHR , VK_PERFORMANCE_COUNTER_DESCRIPTION_CONCURRENTLY_IMPACTED_BIT_KHR , } impl VkPerformanceCounterDescriptionFlagBitsKHR { pub const VK_PERFORMANCE_COUNTER_DESCRIPTION_PERFORMANCE_IMPACTING_KHR : VkPerformanceCounterDescriptionFlagBitsKHR = VkPerformanceCounterDescriptionFlagBitsKHR :: VK_PERFORMANCE_COUNTER_DESCRIPTION_PERFORMANCE_IMPACTING_BIT_KHR ; } impl VkPerformanceCounterDescriptionFlagBitsKHR { pub const VK_PERFORMANCE_COUNTER_DESCRIPTION_CONCURRENTLY_IMPACTED_KHR : VkPerformanceCounterDescriptionFlagBitsKHR = VkPerformanceCounterDescriptionFlagBitsKHR :: VK_PERFORMANCE_COUNTER_DESCRIPTION_CONCURRENTLY_IMPACTED_BIT_KHR ; }



# [repr (C)] enum VkPerformanceConfigurationTypeINTEL { VK_PERFORMANCE_CONFIGURATION_TYPE_COMMAND_QUEUE_METRICS_DISCOVERY_ACTIVATED_INTEL = 0 , }
# [repr (C)] enum VkQueryPoolSamplingModeINTEL { VK_QUERY_POOL_SAMPLING_MODE_MANUAL_INTEL = 0 , }
# [repr (C)] enum VkPerformanceOverrideTypeINTEL { VK_PERFORMANCE_OVERRIDE_TYPE_NULL_HARDWARE_INTEL = 0 , VK_PERFORMANCE_OVERRIDE_TYPE_FLUSH_GPU_CACHES_INTEL = 1 , }
# [repr (C)] enum VkPerformanceParameterTypeINTEL { VK_PERFORMANCE_PARAMETER_TYPE_HW_COUNTERS_SUPPORTED_INTEL = 0 , VK_PERFORMANCE_PARAMETER_TYPE_STREAM_MARKER_VALID_BITS_INTEL = 1 , }
# [repr (C)] enum VkPerformanceValueTypeINTEL { VK_PERFORMANCE_VALUE_TYPE_UINT32_INTEL = 0 , VK_PERFORMANCE_VALUE_TYPE_UINT64_INTEL = 1 , VK_PERFORMANCE_VALUE_TYPE_FLOAT_INTEL = 2 , VK_PERFORMANCE_VALUE_TYPE_BOOL_INTEL = 3 , VK_PERFORMANCE_VALUE_TYPE_STRING_INTEL = 4 , }
# [repr (C)] enum VkShaderFloatControlsIndependence { VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY = 0 , VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL = 1 , VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE = 2 , }
# [repr (C)] enum VkPipelineExecutableStatisticFormatKHR { VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_BOOL32_KHR = 0 , VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_INT64_KHR = 1 , VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_UINT64_KHR = 2 , VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_FLOAT64_KHR = 3 , }
# [repr (C)] enum VkLineRasterizationModeEXT { VK_LINE_RASTERIZATION_MODE_DEFAULT_EXT = 0 , VK_LINE_RASTERIZATION_MODE_RECTANGULAR_EXT = 1 , VK_LINE_RASTERIZATION_MODE_BRESENHAM_EXT = 2 , VK_LINE_RASTERIZATION_MODE_RECTANGULAR_SMOOTH_EXT = 3 , }


# [repr (C)] enum VkFaultLevel { VK_FAULT_LEVEL_UNASSIGNED = 0 , VK_FAULT_LEVEL_CRITICAL = 1 , VK_FAULT_LEVEL_RECOVERABLE = 2 , VK_FAULT_LEVEL_WARNING = 3 , }
# [repr (C)] enum VkFaultType { VK_FAULT_TYPE_INVALID = 0 , VK_FAULT_TYPE_UNASSIGNED = 1 , VK_FAULT_TYPE_IMPLEMENTATION = 2 , VK_FAULT_TYPE_SYSTEM = 3 , VK_FAULT_TYPE_PHYSICAL_DEVICE = 4 , VK_FAULT_TYPE_COMMAND_BUFFER_FULL = 5 , VK_FAULT_TYPE_INVALID_API_USAGE = 6 , }
# [repr (C)] enum VkFaultQueryBehavior { VK_FAULT_QUERY_BEHAVIOR_GET_AND_CLEAR_ALL_FAULTS = 0 , }
# [repr (C)] enum VkToolPurposeFlagBits { VK_TOOL_PURPOSE_VALIDATION_BIT , VK_TOOL_PURPOSE_PROFILING_BIT , VK_TOOL_PURPOSE_TRACING_BIT , VK_TOOL_PURPOSE_ADDITIONAL_FEATURES_BIT , VK_TOOL_PURPOSE_MODIFYING_FEATURES_BIT , } impl VkToolPurposeFlagBits { pub const VK_TOOL_PURPOSE_VALIDATION_BIT_EXT : VkToolPurposeFlagBits = VkToolPurposeFlagBits :: VK_TOOL_PURPOSE_VALIDATION_BIT ; } impl VkToolPurposeFlagBits { pub const VK_TOOL_PURPOSE_PROFILING_BIT_EXT : VkToolPurposeFlagBits = VkToolPurposeFlagBits :: VK_TOOL_PURPOSE_PROFILING_BIT ; } impl VkToolPurposeFlagBits { pub const VK_TOOL_PURPOSE_TRACING_BIT_EXT : VkToolPurposeFlagBits = VkToolPurposeFlagBits :: VK_TOOL_PURPOSE_TRACING_BIT ; } impl VkToolPurposeFlagBits { pub const VK_TOOL_PURPOSE_ADDITIONAL_FEATURES_BIT_EXT : VkToolPurposeFlagBits = VkToolPurposeFlagBits :: VK_TOOL_PURPOSE_ADDITIONAL_FEATURES_BIT ; } impl VkToolPurposeFlagBits { pub const VK_TOOL_PURPOSE_MODIFYING_FEATURES_BIT_EXT : VkToolPurposeFlagBits = VkToolPurposeFlagBits :: VK_TOOL_PURPOSE_MODIFYING_FEATURES_BIT ; }
# [repr (C)] enum VkPipelineMatchControl { VK_PIPELINE_MATCH_CONTROL_APPLICATION_UUID_EXACT_MATCH = 0 , }
# [repr (C)] enum VkFragmentShadingRateCombinerOpKHR { VK_FRAGMENT_SHADING_RATE_COMBINER_OP_KEEP_KHR = 0 , VK_FRAGMENT_SHADING_RATE_COMBINER_OP_REPLACE_KHR = 1 , VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MIN_KHR = 2 , VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MAX_KHR = 3 , VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MUL_KHR = 4 , }
# [repr (C)] enum VkFragmentShadingRateNV { VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_PIXEL_NV = 0 , VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_1X2_PIXELS_NV = 1 , VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X1_PIXELS_NV = 4 , VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X2_PIXELS_NV = 5 , VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X4_PIXELS_NV = 6 , VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_4X2_PIXELS_NV = 9 , VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_4X4_PIXELS_NV = 10 , VK_FRAGMENT_SHADING_RATE_2_INVOCATIONS_PER_PIXEL_NV = 11 , VK_FRAGMENT_SHADING_RATE_4_INVOCATIONS_PER_PIXEL_NV = 12 , VK_FRAGMENT_SHADING_RATE_8_INVOCATIONS_PER_PIXEL_NV = 13 , VK_FRAGMENT_SHADING_RATE_16_INVOCATIONS_PER_PIXEL_NV = 14 , VK_FRAGMENT_SHADING_RATE_NO_INVOCATIONS_NV = 15 , }
# [repr (C)] enum VkFragmentShadingRateTypeNV { VK_FRAGMENT_SHADING_RATE_TYPE_FRAGMENT_SIZE_NV = 0 , VK_FRAGMENT_SHADING_RATE_TYPE_ENUMS_NV = 1 , }
# [repr (C)] enum VkSubpassMergeStatusEXT { VK_SUBPASS_MERGE_STATUS_MERGED_EXT = 0 , VK_SUBPASS_MERGE_STATUS_DISALLOWED_EXT = 1 , VK_SUBPASS_MERGE_STATUS_NOT_MERGED_SIDE_EFFECTS_EXT = 2 , VK_SUBPASS_MERGE_STATUS_NOT_MERGED_SAMPLES_MISMATCH_EXT = 3 , VK_SUBPASS_MERGE_STATUS_NOT_MERGED_VIEWS_MISMATCH_EXT = 4 , VK_SUBPASS_MERGE_STATUS_NOT_MERGED_ALIASING_EXT = 5 , VK_SUBPASS_MERGE_STATUS_NOT_MERGED_DEPENDENCIES_EXT = 6 , VK_SUBPASS_MERGE_STATUS_NOT_MERGED_INCOMPATIBLE_INPUT_ATTACHMENT_EXT = 7 , VK_SUBPASS_MERGE_STATUS_NOT_MERGED_TOO_MANY_ATTACHMENTS_EXT = 8 , VK_SUBPASS_MERGE_STATUS_NOT_MERGED_INSUFFICIENT_STORAGE_EXT = 9 , VK_SUBPASS_MERGE_STATUS_NOT_MERGED_DEPTH_STENCIL_COUNT_EXT = 10 , VK_SUBPASS_MERGE_STATUS_NOT_MERGED_RESOLVE_ATTACHMENT_REUSE_EXT = 11 , VK_SUBPASS_MERGE_STATUS_NOT_MERGED_SINGLE_SUBPASS_EXT = 12 , VK_SUBPASS_MERGE_STATUS_NOT_MERGED_UNSPECIFIED_EXT = 13 , }
# [repr (C)] enum VkAccessFlagBits2 { VK_ACCESS_2_NONE = 0 , VK_ACCESS_2_INDIRECT_COMMAND_READ_BIT , VK_ACCESS_2_INDEX_READ_BIT , VK_ACCESS_2_VERTEX_ATTRIBUTE_READ_BIT , VK_ACCESS_2_UNIFORM_READ_BIT , VK_ACCESS_2_INPUT_ATTACHMENT_READ_BIT , VK_ACCESS_2_SHADER_READ_BIT , VK_ACCESS_2_SHADER_WRITE_BIT , VK_ACCESS_2_COLOR_ATTACHMENT_READ_BIT , VK_ACCESS_2_COLOR_ATTACHMENT_WRITE_BIT , VK_ACCESS_2_DEPTH_STENCIL_ATTACHMENT_READ_BIT , VK_ACCESS_2_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT , VK_ACCESS_2_TRANSFER_READ_BIT , VK_ACCESS_2_TRANSFER_WRITE_BIT , VK_ACCESS_2_HOST_READ_BIT , VK_ACCESS_2_HOST_WRITE_BIT , VK_ACCESS_2_MEMORY_READ_BIT , VK_ACCESS_2_MEMORY_WRITE_BIT , VK_ACCESS_2_SHADER_SAMPLED_READ_BIT , VK_ACCESS_2_SHADER_STORAGE_READ_BIT , VK_ACCESS_2_SHADER_STORAGE_WRITE_BIT , } impl VkAccessFlagBits2 { pub const VK_ACCESS_2_NONE_KHR : VkAccessFlagBits2 = VkAccessFlagBits2 :: VK_ACCESS_2_NONE ; } impl VkAccessFlagBits2 { pub const VK_ACCESS_2_INDIRECT_COMMAND_READ_BIT_KHR : VkAccessFlagBits2 = VkAccessFlagBits2 :: VK_ACCESS_2_INDIRECT_COMMAND_READ_BIT ; } impl VkAccessFlagBits2 { pub const VK_ACCESS_2_INDEX_READ_BIT_KHR : VkAccessFlagBits2 = VkAccessFlagBits2 :: VK_ACCESS_2_INDEX_READ_BIT ; } impl VkAccessFlagBits2 { pub const VK_ACCESS_2_VERTEX_ATTRIBUTE_READ_BIT_KHR : VkAccessFlagBits2 = VkAccessFlagBits2 :: VK_ACCESS_2_VERTEX_ATTRIBUTE_READ_BIT ; } impl VkAccessFlagBits2 { pub const VK_ACCESS_2_UNIFORM_READ_BIT_KHR : VkAccessFlagBits2 = VkAccessFlagBits2 :: VK_ACCESS_2_UNIFORM_READ_BIT ; } impl VkAccessFlagBits2 { pub const VK_ACCESS_2_INPUT_ATTACHMENT_READ_BIT_KHR : VkAccessFlagBits2 = VkAccessFlagBits2 :: VK_ACCESS_2_INPUT_ATTACHMENT_READ_BIT ; } impl VkAccessFlagBits2 { pub const VK_ACCESS_2_SHADER_READ_BIT_KHR : VkAccessFlagBits2 = VkAccessFlagBits2 :: VK_ACCESS_2_SHADER_READ_BIT ; } impl VkAccessFlagBits2 { pub const VK_ACCESS_2_SHADER_WRITE_BIT_KHR : VkAccessFlagBits2 = VkAccessFlagBits2 :: VK_ACCESS_2_SHADER_WRITE_BIT ; } impl VkAccessFlagBits2 { pub const VK_ACCESS_2_COLOR_ATTACHMENT_READ_BIT_KHR : VkAccessFlagBits2 = VkAccessFlagBits2 :: VK_ACCESS_2_COLOR_ATTACHMENT_READ_BIT ; } impl VkAccessFlagBits2 { pub const VK_ACCESS_2_COLOR_ATTACHMENT_WRITE_BIT_KHR : VkAccessFlagBits2 = VkAccessFlagBits2 :: VK_ACCESS_2_COLOR_ATTACHMENT_WRITE_BIT ; } impl VkAccessFlagBits2 { pub const VK_ACCESS_2_DEPTH_STENCIL_ATTACHMENT_READ_BIT_KHR : VkAccessFlagBits2 = VkAccessFlagBits2 :: VK_ACCESS_2_DEPTH_STENCIL_ATTACHMENT_READ_BIT ; } impl VkAccessFlagBits2 { pub const VK_ACCESS_2_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT_KHR : VkAccessFlagBits2 = VkAccessFlagBits2 :: VK_ACCESS_2_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT ; } impl VkAccessFlagBits2 { pub const VK_ACCESS_2_TRANSFER_READ_BIT_KHR : VkAccessFlagBits2 = VkAccessFlagBits2 :: VK_ACCESS_2_TRANSFER_READ_BIT ; } impl VkAccessFlagBits2 { pub const VK_ACCESS_2_TRANSFER_WRITE_BIT_KHR : VkAccessFlagBits2 = VkAccessFlagBits2 :: VK_ACCESS_2_TRANSFER_WRITE_BIT ; } impl VkAccessFlagBits2 { pub const VK_ACCESS_2_HOST_READ_BIT_KHR : VkAccessFlagBits2 = VkAccessFlagBits2 :: VK_ACCESS_2_HOST_READ_BIT ; } impl VkAccessFlagBits2 { pub const VK_ACCESS_2_HOST_WRITE_BIT_KHR : VkAccessFlagBits2 = VkAccessFlagBits2 :: VK_ACCESS_2_HOST_WRITE_BIT ; } impl VkAccessFlagBits2 { pub const VK_ACCESS_2_MEMORY_READ_BIT_KHR : VkAccessFlagBits2 = VkAccessFlagBits2 :: VK_ACCESS_2_MEMORY_READ_BIT ; } impl VkAccessFlagBits2 { pub const VK_ACCESS_2_MEMORY_WRITE_BIT_KHR : VkAccessFlagBits2 = VkAccessFlagBits2 :: VK_ACCESS_2_MEMORY_WRITE_BIT ; } impl VkAccessFlagBits2 { pub const VK_ACCESS_2_SHADER_SAMPLED_READ_BIT_KHR : VkAccessFlagBits2 = VkAccessFlagBits2 :: VK_ACCESS_2_SHADER_SAMPLED_READ_BIT ; } impl VkAccessFlagBits2 { pub const VK_ACCESS_2_SHADER_STORAGE_READ_BIT_KHR : VkAccessFlagBits2 = VkAccessFlagBits2 :: VK_ACCESS_2_SHADER_STORAGE_READ_BIT ; } impl VkAccessFlagBits2 { pub const VK_ACCESS_2_SHADER_STORAGE_WRITE_BIT_KHR : VkAccessFlagBits2 = VkAccessFlagBits2 :: VK_ACCESS_2_SHADER_STORAGE_WRITE_BIT ; }
# [repr (C)] enum VkPipelineStageFlagBits2 { VK_PIPELINE_STAGE_2_NONE = 0 , VK_PIPELINE_STAGE_2_TOP_OF_PIPE_BIT , VK_PIPELINE_STAGE_2_DRAW_INDIRECT_BIT , VK_PIPELINE_STAGE_2_VERTEX_INPUT_BIT , VK_PIPELINE_STAGE_2_VERTEX_SHADER_BIT , VK_PIPELINE_STAGE_2_TESSELLATION_CONTROL_SHADER_BIT , VK_PIPELINE_STAGE_2_TESSELLATION_EVALUATION_SHADER_BIT , VK_PIPELINE_STAGE_2_GEOMETRY_SHADER_BIT , VK_PIPELINE_STAGE_2_FRAGMENT_SHADER_BIT , VK_PIPELINE_STAGE_2_EARLY_FRAGMENT_TESTS_BIT , VK_PIPELINE_STAGE_2_LATE_FRAGMENT_TESTS_BIT , VK_PIPELINE_STAGE_2_COLOR_ATTACHMENT_OUTPUT_BIT , VK_PIPELINE_STAGE_2_COMPUTE_SHADER_BIT , VK_PIPELINE_STAGE_2_ALL_TRANSFER_BIT , VK_PIPELINE_STAGE_2_BOTTOM_OF_PIPE_BIT , VK_PIPELINE_STAGE_2_HOST_BIT , VK_PIPELINE_STAGE_2_ALL_GRAPHICS_BIT , VK_PIPELINE_STAGE_2_ALL_COMMANDS_BIT , VK_PIPELINE_STAGE_2_COPY_BIT , VK_PIPELINE_STAGE_2_RESOLVE_BIT , VK_PIPELINE_STAGE_2_BLIT_BIT , VK_PIPELINE_STAGE_2_CLEAR_BIT , VK_PIPELINE_STAGE_2_INDEX_INPUT_BIT , VK_PIPELINE_STAGE_2_VERTEX_ATTRIBUTE_INPUT_BIT , VK_PIPELINE_STAGE_2_PRE_RASTERIZATION_SHADERS_BIT , } impl VkPipelineStageFlagBits2 { pub const VK_PIPELINE_STAGE_2_NONE_KHR : VkPipelineStageFlagBits2 = VkPipelineStageFlagBits2 :: VK_PIPELINE_STAGE_2_NONE ; } impl VkPipelineStageFlagBits2 { pub const VK_PIPELINE_STAGE_2_TOP_OF_PIPE_BIT_KHR : VkPipelineStageFlagBits2 = VkPipelineStageFlagBits2 :: VK_PIPELINE_STAGE_2_TOP_OF_PIPE_BIT ; } impl VkPipelineStageFlagBits2 { pub const VK_PIPELINE_STAGE_2_DRAW_INDIRECT_BIT_KHR : VkPipelineStageFlagBits2 = VkPipelineStageFlagBits2 :: VK_PIPELINE_STAGE_2_DRAW_INDIRECT_BIT ; } impl VkPipelineStageFlagBits2 { pub const VK_PIPELINE_STAGE_2_VERTEX_INPUT_BIT_KHR : VkPipelineStageFlagBits2 = VkPipelineStageFlagBits2 :: VK_PIPELINE_STAGE_2_VERTEX_INPUT_BIT ; } impl VkPipelineStageFlagBits2 { pub const VK_PIPELINE_STAGE_2_VERTEX_SHADER_BIT_KHR : VkPipelineStageFlagBits2 = VkPipelineStageFlagBits2 :: VK_PIPELINE_STAGE_2_VERTEX_SHADER_BIT ; } impl VkPipelineStageFlagBits2 { pub const VK_PIPELINE_STAGE_2_TESSELLATION_CONTROL_SHADER_BIT_KHR : VkPipelineStageFlagBits2 = VkPipelineStageFlagBits2 :: VK_PIPELINE_STAGE_2_TESSELLATION_CONTROL_SHADER_BIT ; } impl VkPipelineStageFlagBits2 { pub const VK_PIPELINE_STAGE_2_TESSELLATION_EVALUATION_SHADER_BIT_KHR : VkPipelineStageFlagBits2 = VkPipelineStageFlagBits2 :: VK_PIPELINE_STAGE_2_TESSELLATION_EVALUATION_SHADER_BIT ; } impl VkPipelineStageFlagBits2 { pub const VK_PIPELINE_STAGE_2_GEOMETRY_SHADER_BIT_KHR : VkPipelineStageFlagBits2 = VkPipelineStageFlagBits2 :: VK_PIPELINE_STAGE_2_GEOMETRY_SHADER_BIT ; } impl VkPipelineStageFlagBits2 { pub const VK_PIPELINE_STAGE_2_FRAGMENT_SHADER_BIT_KHR : VkPipelineStageFlagBits2 = VkPipelineStageFlagBits2 :: VK_PIPELINE_STAGE_2_FRAGMENT_SHADER_BIT ; } impl VkPipelineStageFlagBits2 { pub const VK_PIPELINE_STAGE_2_EARLY_FRAGMENT_TESTS_BIT_KHR : VkPipelineStageFlagBits2 = VkPipelineStageFlagBits2 :: VK_PIPELINE_STAGE_2_EARLY_FRAGMENT_TESTS_BIT ; } impl VkPipelineStageFlagBits2 { pub const VK_PIPELINE_STAGE_2_LATE_FRAGMENT_TESTS_BIT_KHR : VkPipelineStageFlagBits2 = VkPipelineStageFlagBits2 :: VK_PIPELINE_STAGE_2_LATE_FRAGMENT_TESTS_BIT ; } impl VkPipelineStageFlagBits2 { pub const VK_PIPELINE_STAGE_2_COLOR_ATTACHMENT_OUTPUT_BIT_KHR : VkPipelineStageFlagBits2 = VkPipelineStageFlagBits2 :: VK_PIPELINE_STAGE_2_COLOR_ATTACHMENT_OUTPUT_BIT ; } impl VkPipelineStageFlagBits2 { pub const VK_PIPELINE_STAGE_2_COMPUTE_SHADER_BIT_KHR : VkPipelineStageFlagBits2 = VkPipelineStageFlagBits2 :: VK_PIPELINE_STAGE_2_COMPUTE_SHADER_BIT ; } impl VkPipelineStageFlagBits2 { pub const VK_PIPELINE_STAGE_2_ALL_TRANSFER_BIT_KHR : VkPipelineStageFlagBits2 = VkPipelineStageFlagBits2 :: VK_PIPELINE_STAGE_2_ALL_TRANSFER_BIT ; } impl VkPipelineStageFlagBits2 { pub const VK_PIPELINE_STAGE_2_TRANSFER_BIT : VkPipelineStageFlagBits2 = VkPipelineStageFlagBits2 :: VK_PIPELINE_STAGE_2_ALL_TRANSFER_BIT_KHR ; } impl VkPipelineStageFlagBits2 { pub const VK_PIPELINE_STAGE_2_TRANSFER_BIT_KHR : VkPipelineStageFlagBits2 = VkPipelineStageFlagBits2 :: VK_PIPELINE_STAGE_2_ALL_TRANSFER_BIT ; } impl VkPipelineStageFlagBits2 { pub const VK_PIPELINE_STAGE_2_BOTTOM_OF_PIPE_BIT_KHR : VkPipelineStageFlagBits2 = VkPipelineStageFlagBits2 :: VK_PIPELINE_STAGE_2_BOTTOM_OF_PIPE_BIT ; } impl VkPipelineStageFlagBits2 { pub const VK_PIPELINE_STAGE_2_HOST_BIT_KHR : VkPipelineStageFlagBits2 = VkPipelineStageFlagBits2 :: VK_PIPELINE_STAGE_2_HOST_BIT ; } impl VkPipelineStageFlagBits2 { pub const VK_PIPELINE_STAGE_2_ALL_GRAPHICS_BIT_KHR : VkPipelineStageFlagBits2 = VkPipelineStageFlagBits2 :: VK_PIPELINE_STAGE_2_ALL_GRAPHICS_BIT ; } impl VkPipelineStageFlagBits2 { pub const VK_PIPELINE_STAGE_2_ALL_COMMANDS_BIT_KHR : VkPipelineStageFlagBits2 = VkPipelineStageFlagBits2 :: VK_PIPELINE_STAGE_2_ALL_COMMANDS_BIT ; } impl VkPipelineStageFlagBits2 { pub const VK_PIPELINE_STAGE_2_COPY_BIT_KHR : VkPipelineStageFlagBits2 = VkPipelineStageFlagBits2 :: VK_PIPELINE_STAGE_2_COPY_BIT ; } impl VkPipelineStageFlagBits2 { pub const VK_PIPELINE_STAGE_2_RESOLVE_BIT_KHR : VkPipelineStageFlagBits2 = VkPipelineStageFlagBits2 :: VK_PIPELINE_STAGE_2_RESOLVE_BIT ; } impl VkPipelineStageFlagBits2 { pub const VK_PIPELINE_STAGE_2_BLIT_BIT_KHR : VkPipelineStageFlagBits2 = VkPipelineStageFlagBits2 :: VK_PIPELINE_STAGE_2_BLIT_BIT ; } impl VkPipelineStageFlagBits2 { pub const VK_PIPELINE_STAGE_2_CLEAR_BIT_KHR : VkPipelineStageFlagBits2 = VkPipelineStageFlagBits2 :: VK_PIPELINE_STAGE_2_CLEAR_BIT ; } impl VkPipelineStageFlagBits2 { pub const VK_PIPELINE_STAGE_2_INDEX_INPUT_BIT_KHR : VkPipelineStageFlagBits2 = VkPipelineStageFlagBits2 :: VK_PIPELINE_STAGE_2_INDEX_INPUT_BIT ; } impl VkPipelineStageFlagBits2 { pub const VK_PIPELINE_STAGE_2_VERTEX_ATTRIBUTE_INPUT_BIT_KHR : VkPipelineStageFlagBits2 = VkPipelineStageFlagBits2 :: VK_PIPELINE_STAGE_2_VERTEX_ATTRIBUTE_INPUT_BIT ; } impl VkPipelineStageFlagBits2 { pub const VK_PIPELINE_STAGE_2_PRE_RASTERIZATION_SHADERS_BIT_KHR : VkPipelineStageFlagBits2 = VkPipelineStageFlagBits2 :: VK_PIPELINE_STAGE_2_PRE_RASTERIZATION_SHADERS_BIT ; }
# [repr (C)] enum VkSubmitFlagBits { VK_SUBMIT_PROTECTED_BIT , } impl VkSubmitFlagBits { pub const VK_SUBMIT_PROTECTED_BIT_KHR : VkSubmitFlagBits = VkSubmitFlagBits :: VK_SUBMIT_PROTECTED_BIT ; }


# [repr (C)] enum VkSciSyncClientTypeNV { VK_SCI_SYNC_CLIENT_TYPE_SIGNALER_NV = 0 , VK_SCI_SYNC_CLIENT_TYPE_WAITER_NV = 1 , VK_SCI_SYNC_CLIENT_TYPE_SIGNALER_WAITER_NV = 2 , }
# [repr (C)] enum VkSciSyncPrimitiveTypeNV { VK_SCI_SYNC_PRIMITIVE_TYPE_FENCE_NV = 0 , VK_SCI_SYNC_PRIMITIVE_TYPE_SEMAPHORE_NV = 1 , }
# [repr (C)] enum VkProvokingVertexModeEXT { VK_PROVOKING_VERTEX_MODE_FIRST_VERTEX_EXT = 0 , VK_PROVOKING_VERTEX_MODE_LAST_VERTEX_EXT = 1 , }
# [repr (C)] enum VkPipelineCacheValidationVersion { VK_PIPELINE_CACHE_VALIDATION_VERSION_SAFETY_CRITICAL_ONE = 1 , }
# [repr (C)] enum VkAccelerationStructureMotionInstanceTypeNV { VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_STATIC_NV = 0 , VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_MATRIX_MOTION_NV = 1 , VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_SRT_MOTION_NV = 2 , }


# [repr (C)] enum VkGraphicsPipelineLibraryFlagBitsEXT { VK_GRAPHICS_PIPELINE_LIBRARY_VERTEX_INPUT_INTERFACE_BIT_EXT , VK_GRAPHICS_PIPELINE_LIBRARY_PRE_RASTERIZATION_SHADERS_BIT_EXT , VK_GRAPHICS_PIPELINE_LIBRARY_FRAGMENT_SHADER_BIT_EXT , VK_GRAPHICS_PIPELINE_LIBRARY_FRAGMENT_OUTPUT_INTERFACE_BIT_EXT , }
# [repr (C)] enum VkDeviceAddressBindingFlagBitsEXT { VK_DEVICE_ADDRESS_BINDING_INTERNAL_OBJECT_BIT_EXT , }
# [repr (C)] enum VkDeviceAddressBindingTypeEXT { VK_DEVICE_ADDRESS_BINDING_TYPE_BIND_EXT = 0 , VK_DEVICE_ADDRESS_BINDING_TYPE_UNBIND_EXT = 1 , }
# [repr (C)] enum VkPresentScalingFlagBitsEXT { VK_PRESENT_SCALING_ONE_TO_ONE_BIT_EXT , VK_PRESENT_SCALING_ASPECT_RATIO_STRETCH_BIT_EXT , VK_PRESENT_SCALING_STRETCH_BIT_EXT , }
# [repr (C)] enum VkPresentGravityFlagBitsEXT { VK_PRESENT_GRAVITY_MIN_BIT_EXT , VK_PRESENT_GRAVITY_MAX_BIT_EXT , VK_PRESENT_GRAVITY_CENTERED_BIT_EXT , }
# [repr (C)] enum VkVideoCodecOperationFlagBitsKHR { VK_VIDEO_CODEC_OPERATION_NONE_KHR = 0 , }
# [repr (C)] enum VkVideoChromaSubsamplingFlagBitsKHR { VK_VIDEO_CHROMA_SUBSAMPLING_INVALID_KHR = 0 , VK_VIDEO_CHROMA_SUBSAMPLING_MONOCHROME_BIT_KHR , VK_VIDEO_CHROMA_SUBSAMPLING_420_BIT_KHR , VK_VIDEO_CHROMA_SUBSAMPLING_422_BIT_KHR , VK_VIDEO_CHROMA_SUBSAMPLING_444_BIT_KHR , }
# [repr (C)] enum VkVideoComponentBitDepthFlagBitsKHR { VK_VIDEO_COMPONENT_BIT_DEPTH_INVALID_KHR = 0 , VK_VIDEO_COMPONENT_BIT_DEPTH_8_BIT_KHR , VK_VIDEO_COMPONENT_BIT_DEPTH_10_BIT_KHR , VK_VIDEO_COMPONENT_BIT_DEPTH_12_BIT_KHR , }
# [repr (C)] enum VkVideoCapabilityFlagBitsKHR { VK_VIDEO_CAPABILITY_PROTECTED_CONTENT_BIT_KHR , VK_VIDEO_CAPABILITY_SEPARATE_REFERENCE_IMAGES_BIT_KHR , }
# [repr (C)] enum VkVideoSessionCreateFlagBitsKHR { VK_VIDEO_SESSION_CREATE_PROTECTED_CONTENT_BIT_KHR , }
# [repr (C)] enum VkVideoDecodeH264PictureLayoutFlagBitsKHR { VK_VIDEO_DECODE_H264_PICTURE_LAYOUT_PROGRESSIVE_KHR = 0 , VK_VIDEO_DECODE_H264_PICTURE_LAYOUT_INTERLACED_INTERLEAVED_LINES_BIT_KHR , VK_VIDEO_DECODE_H264_PICTURE_LAYOUT_INTERLACED_SEPARATE_PLANES_BIT_KHR , }
# [repr (C)] enum VkVideoCodingControlFlagBitsKHR { VK_VIDEO_CODING_CONTROL_RESET_BIT_KHR , }
# [repr (C)] enum VkQueryResultStatusKHR { VK_QUERY_RESULT_STATUS_ERROR_KHR = - 1 , VK_QUERY_RESULT_STATUS_NOT_READY_KHR = 0 , VK_QUERY_RESULT_STATUS_COMPLETE_KHR = 1 , }
# [repr (C)] enum VkVideoDecodeUsageFlagBitsKHR { VK_VIDEO_DECODE_USAGE_DEFAULT_KHR = 0 , VK_VIDEO_DECODE_USAGE_TRANSCODING_BIT_KHR , VK_VIDEO_DECODE_USAGE_OFFLINE_BIT_KHR , VK_VIDEO_DECODE_USAGE_STREAMING_BIT_KHR , }
# [repr (C)] enum VkVideoDecodeCapabilityFlagBitsKHR { VK_VIDEO_DECODE_CAPABILITY_DPB_AND_OUTPUT_COINCIDE_BIT_KHR , VK_VIDEO_DECODE_CAPABILITY_DPB_AND_OUTPUT_DISTINCT_BIT_KHR , }
# [repr (C)] enum VkVideoEncodeUsageFlagBitsKHR { VK_VIDEO_ENCODE_USAGE_DEFAULT_KHR = 0 , VK_VIDEO_ENCODE_USAGE_TRANSCODING_BIT_KHR , VK_VIDEO_ENCODE_USAGE_STREAMING_BIT_KHR , VK_VIDEO_ENCODE_USAGE_RECORDING_BIT_KHR , VK_VIDEO_ENCODE_USAGE_CONFERENCING_BIT_KHR , }
# [repr (C)] enum VkVideoEncodeContentFlagBitsKHR { VK_VIDEO_ENCODE_CONTENT_DEFAULT_KHR = 0 , VK_VIDEO_ENCODE_CONTENT_CAMERA_BIT_KHR , VK_VIDEO_ENCODE_CONTENT_DESKTOP_BIT_KHR , VK_VIDEO_ENCODE_CONTENT_RENDERED_BIT_KHR , }
# [repr (C)] enum VkVideoEncodeTuningModeKHR { VK_VIDEO_ENCODE_TUNING_MODE_DEFAULT_KHR = 0 , VK_VIDEO_ENCODE_TUNING_MODE_HIGH_QUALITY_KHR = 1 , VK_VIDEO_ENCODE_TUNING_MODE_LOW_LATENCY_KHR = 2 , VK_VIDEO_ENCODE_TUNING_MODE_ULTRA_LOW_LATENCY_KHR = 3 , VK_VIDEO_ENCODE_TUNING_MODE_LOSSLESS_KHR = 4 , }
# [repr (C)] enum VkVideoEncodeCapabilityFlagBitsKHR { VK_VIDEO_ENCODE_CAPABILITY_PRECEDING_EXTERNALLY_ENCODED_BYTES_BIT_KHR , }
# [repr (C)] enum VkVideoEncodeFeedbackFlagBitsKHR { VK_VIDEO_ENCODE_FEEDBACK_BITSTREAM_BUFFER_OFFSET_BIT_KHR , VK_VIDEO_ENCODE_FEEDBACK_BITSTREAM_BYTES_WRITTEN_BIT_KHR , VK_VIDEO_ENCODE_FEEDBACK_BITSTREAM_HAS_OVERRIDES_BIT_KHR , }
# [repr (C)] enum VkVideoEncodeRateControlModeFlagBitsKHR { VK_VIDEO_ENCODE_RATE_CONTROL_MODE_DEFAULT_KHR = 0 , VK_VIDEO_ENCODE_RATE_CONTROL_MODE_DISABLED_BIT_KHR , VK_VIDEO_ENCODE_RATE_CONTROL_MODE_CBR_BIT_KHR , VK_VIDEO_ENCODE_RATE_CONTROL_MODE_VBR_BIT_KHR , }
# [repr (C)] enum VkVideoEncodeH264CapabilityFlagBitsEXT { VK_VIDEO_ENCODE_H264_CAPABILITY_HRD_COMPLIANCE_BIT_EXT , VK_VIDEO_ENCODE_H264_CAPABILITY_PREDICTION_WEIGHT_TABLE_GENERATED_BIT_EXT , VK_VIDEO_ENCODE_H264_CAPABILITY_ROW_UNALIGNED_SLICE_BIT_EXT , VK_VIDEO_ENCODE_H264_CAPABILITY_DIFFERENT_SLICE_TYPE_BIT_EXT , VK_VIDEO_ENCODE_H264_CAPABILITY_B_FRAME_IN_L0_LIST_BIT_EXT , VK_VIDEO_ENCODE_H264_CAPABILITY_B_FRAME_IN_L1_LIST_BIT_EXT , VK_VIDEO_ENCODE_H264_CAPABILITY_PER_PICTURE_TYPE_MIN_MAX_QP_BIT_EXT , VK_VIDEO_ENCODE_H264_CAPABILITY_PER_SLICE_CONSTANT_QP_BIT_EXT , VK_VIDEO_ENCODE_H264_CAPABILITY_GENERATE_PREFIX_NALU_BIT_EXT , }
# [repr (C)] enum VkVideoEncodeH264StdFlagBitsEXT { VK_VIDEO_ENCODE_H264_STD_SEPARATE_COLOR_PLANE_FLAG_SET_BIT_EXT , VK_VIDEO_ENCODE_H264_STD_QPPRIME_Y_ZERO_TRANSFORM_BYPASS_FLAG_SET_BIT_EXT , VK_VIDEO_ENCODE_H264_STD_SCALING_MATRIX_PRESENT_FLAG_SET_BIT_EXT , VK_VIDEO_ENCODE_H264_STD_CHROMA_QP_INDEX_OFFSET_BIT_EXT , VK_VIDEO_ENCODE_H264_STD_SECOND_CHROMA_QP_INDEX_OFFSET_BIT_EXT , VK_VIDEO_ENCODE_H264_STD_PIC_INIT_QP_MINUS26_BIT_EXT , VK_VIDEO_ENCODE_H264_STD_WEIGHTED_PRED_FLAG_SET_BIT_EXT , VK_VIDEO_ENCODE_H264_STD_WEIGHTED_BIPRED_IDC_EXPLICIT_BIT_EXT , VK_VIDEO_ENCODE_H264_STD_WEIGHTED_BIPRED_IDC_IMPLICIT_BIT_EXT , VK_VIDEO_ENCODE_H264_STD_TRANSFORM_8X8_MODE_FLAG_SET_BIT_EXT , VK_VIDEO_ENCODE_H264_STD_DIRECT_SPATIAL_MV_PRED_FLAG_UNSET_BIT_EXT , VK_VIDEO_ENCODE_H264_STD_ENTROPY_CODING_MODE_FLAG_UNSET_BIT_EXT , VK_VIDEO_ENCODE_H264_STD_ENTROPY_CODING_MODE_FLAG_SET_BIT_EXT , VK_VIDEO_ENCODE_H264_STD_DIRECT_8X8_INFERENCE_FLAG_UNSET_BIT_EXT , VK_VIDEO_ENCODE_H264_STD_CONSTRAINED_INTRA_PRED_FLAG_SET_BIT_EXT , VK_VIDEO_ENCODE_H264_STD_DEBLOCKING_FILTER_DISABLED_BIT_EXT , VK_VIDEO_ENCODE_H264_STD_DEBLOCKING_FILTER_ENABLED_BIT_EXT , VK_VIDEO_ENCODE_H264_STD_DEBLOCKING_FILTER_PARTIAL_BIT_EXT , }
# [repr (C)] enum VkVideoEncodeH264RateControlFlagBitsEXT { VK_VIDEO_ENCODE_H264_RATE_CONTROL_ATTEMPT_HRD_COMPLIANCE_BIT_EXT , VK_VIDEO_ENCODE_H264_RATE_CONTROL_REGULAR_GOP_BIT_EXT , VK_VIDEO_ENCODE_H264_RATE_CONTROL_REFERENCE_PATTERN_FLAT_BIT_EXT , VK_VIDEO_ENCODE_H264_RATE_CONTROL_REFERENCE_PATTERN_DYADIC_BIT_EXT , VK_VIDEO_ENCODE_H264_RATE_CONTROL_TEMPORAL_LAYER_PATTERN_DYADIC_BIT_EXT , }

# [repr (C)] enum VkImageConstraintsInfoFlagBitsFUCHSIA { VK_IMAGE_CONSTRAINTS_INFO_CPU_READ_RARELY_FUCHSIA , VK_IMAGE_CONSTRAINTS_INFO_CPU_READ_OFTEN_FUCHSIA , VK_IMAGE_CONSTRAINTS_INFO_CPU_WRITE_RARELY_FUCHSIA , VK_IMAGE_CONSTRAINTS_INFO_CPU_WRITE_OFTEN_FUCHSIA , VK_IMAGE_CONSTRAINTS_INFO_PROTECTED_OPTIONAL_FUCHSIA , }
# [repr (C)] enum VkFormatFeatureFlagBits2 { VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_BIT , VK_FORMAT_FEATURE_2_STORAGE_IMAGE_BIT , VK_FORMAT_FEATURE_2_STORAGE_IMAGE_ATOMIC_BIT , VK_FORMAT_FEATURE_2_UNIFORM_TEXEL_BUFFER_BIT , VK_FORMAT_FEATURE_2_STORAGE_TEXEL_BUFFER_BIT , VK_FORMAT_FEATURE_2_STORAGE_TEXEL_BUFFER_ATOMIC_BIT , VK_FORMAT_FEATURE_2_VERTEX_BUFFER_BIT , VK_FORMAT_FEATURE_2_COLOR_ATTACHMENT_BIT , VK_FORMAT_FEATURE_2_COLOR_ATTACHMENT_BLEND_BIT , VK_FORMAT_FEATURE_2_DEPTH_STENCIL_ATTACHMENT_BIT , VK_FORMAT_FEATURE_2_BLIT_SRC_BIT , VK_FORMAT_FEATURE_2_BLIT_DST_BIT , VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_LINEAR_BIT , VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_CUBIC_BIT , VK_FORMAT_FEATURE_2_TRANSFER_SRC_BIT , VK_FORMAT_FEATURE_2_TRANSFER_DST_BIT , VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_MINMAX_BIT , VK_FORMAT_FEATURE_2_MIDPOINT_CHROMA_SAMPLES_BIT , VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT , VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT , VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT , VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT , VK_FORMAT_FEATURE_2_DISJOINT_BIT , VK_FORMAT_FEATURE_2_COSITED_CHROMA_SAMPLES_BIT , VK_FORMAT_FEATURE_2_STORAGE_READ_WITHOUT_FORMAT_BIT , VK_FORMAT_FEATURE_2_STORAGE_WRITE_WITHOUT_FORMAT_BIT , VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_DEPTH_COMPARISON_BIT , } impl VkFormatFeatureFlagBits2 { pub const VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_BIT_KHR : VkFormatFeatureFlagBits2 = VkFormatFeatureFlagBits2 :: VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_BIT ; } impl VkFormatFeatureFlagBits2 { pub const VK_FORMAT_FEATURE_2_STORAGE_IMAGE_BIT_KHR : VkFormatFeatureFlagBits2 = VkFormatFeatureFlagBits2 :: VK_FORMAT_FEATURE_2_STORAGE_IMAGE_BIT ; } impl VkFormatFeatureFlagBits2 { pub const VK_FORMAT_FEATURE_2_STORAGE_IMAGE_ATOMIC_BIT_KHR : VkFormatFeatureFlagBits2 = VkFormatFeatureFlagBits2 :: VK_FORMAT_FEATURE_2_STORAGE_IMAGE_ATOMIC_BIT ; } impl VkFormatFeatureFlagBits2 { pub const VK_FORMAT_FEATURE_2_UNIFORM_TEXEL_BUFFER_BIT_KHR : VkFormatFeatureFlagBits2 = VkFormatFeatureFlagBits2 :: VK_FORMAT_FEATURE_2_UNIFORM_TEXEL_BUFFER_BIT ; } impl VkFormatFeatureFlagBits2 { pub const VK_FORMAT_FEATURE_2_STORAGE_TEXEL_BUFFER_BIT_KHR : VkFormatFeatureFlagBits2 = VkFormatFeatureFlagBits2 :: VK_FORMAT_FEATURE_2_STORAGE_TEXEL_BUFFER_BIT ; } impl VkFormatFeatureFlagBits2 { pub const VK_FORMAT_FEATURE_2_STORAGE_TEXEL_BUFFER_ATOMIC_BIT_KHR : VkFormatFeatureFlagBits2 = VkFormatFeatureFlagBits2 :: VK_FORMAT_FEATURE_2_STORAGE_TEXEL_BUFFER_ATOMIC_BIT ; } impl VkFormatFeatureFlagBits2 { pub const VK_FORMAT_FEATURE_2_VERTEX_BUFFER_BIT_KHR : VkFormatFeatureFlagBits2 = VkFormatFeatureFlagBits2 :: VK_FORMAT_FEATURE_2_VERTEX_BUFFER_BIT ; } impl VkFormatFeatureFlagBits2 { pub const VK_FORMAT_FEATURE_2_COLOR_ATTACHMENT_BIT_KHR : VkFormatFeatureFlagBits2 = VkFormatFeatureFlagBits2 :: VK_FORMAT_FEATURE_2_COLOR_ATTACHMENT_BIT ; } impl VkFormatFeatureFlagBits2 { pub const VK_FORMAT_FEATURE_2_COLOR_ATTACHMENT_BLEND_BIT_KHR : VkFormatFeatureFlagBits2 = VkFormatFeatureFlagBits2 :: VK_FORMAT_FEATURE_2_COLOR_ATTACHMENT_BLEND_BIT ; } impl VkFormatFeatureFlagBits2 { pub const VK_FORMAT_FEATURE_2_DEPTH_STENCIL_ATTACHMENT_BIT_KHR : VkFormatFeatureFlagBits2 = VkFormatFeatureFlagBits2 :: VK_FORMAT_FEATURE_2_DEPTH_STENCIL_ATTACHMENT_BIT ; } impl VkFormatFeatureFlagBits2 { pub const VK_FORMAT_FEATURE_2_BLIT_SRC_BIT_KHR : VkFormatFeatureFlagBits2 = VkFormatFeatureFlagBits2 :: VK_FORMAT_FEATURE_2_BLIT_SRC_BIT ; } impl VkFormatFeatureFlagBits2 { pub const VK_FORMAT_FEATURE_2_BLIT_DST_BIT_KHR : VkFormatFeatureFlagBits2 = VkFormatFeatureFlagBits2 :: VK_FORMAT_FEATURE_2_BLIT_DST_BIT ; } impl VkFormatFeatureFlagBits2 { pub const VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_LINEAR_BIT_KHR : VkFormatFeatureFlagBits2 = VkFormatFeatureFlagBits2 :: VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_LINEAR_BIT ; } impl VkFormatFeatureFlagBits2 { pub const VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_CUBIC_BIT_EXT : VkFormatFeatureFlagBits2 = VkFormatFeatureFlagBits2 :: VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_CUBIC_BIT ; } impl VkFormatFeatureFlagBits2 { pub const VK_FORMAT_FEATURE_2_TRANSFER_SRC_BIT_KHR : VkFormatFeatureFlagBits2 = VkFormatFeatureFlagBits2 :: VK_FORMAT_FEATURE_2_TRANSFER_SRC_BIT ; } impl VkFormatFeatureFlagBits2 { pub const VK_FORMAT_FEATURE_2_TRANSFER_DST_BIT_KHR : VkFormatFeatureFlagBits2 = VkFormatFeatureFlagBits2 :: VK_FORMAT_FEATURE_2_TRANSFER_DST_BIT ; } impl VkFormatFeatureFlagBits2 { pub const VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_MINMAX_BIT_KHR : VkFormatFeatureFlagBits2 = VkFormatFeatureFlagBits2 :: VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_MINMAX_BIT ; } impl VkFormatFeatureFlagBits2 { pub const VK_FORMAT_FEATURE_2_MIDPOINT_CHROMA_SAMPLES_BIT_KHR : VkFormatFeatureFlagBits2 = VkFormatFeatureFlagBits2 :: VK_FORMAT_FEATURE_2_MIDPOINT_CHROMA_SAMPLES_BIT ; } impl VkFormatFeatureFlagBits2 { pub const VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT_KHR : VkFormatFeatureFlagBits2 = VkFormatFeatureFlagBits2 :: VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT ; } impl VkFormatFeatureFlagBits2 { pub const VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT_KHR : VkFormatFeatureFlagBits2 = VkFormatFeatureFlagBits2 :: VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT ; } impl VkFormatFeatureFlagBits2 { pub const VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT_KHR : VkFormatFeatureFlagBits2 = VkFormatFeatureFlagBits2 :: VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT ; } impl VkFormatFeatureFlagBits2 { pub const VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT_KHR : VkFormatFeatureFlagBits2 = VkFormatFeatureFlagBits2 :: VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT ; } impl VkFormatFeatureFlagBits2 { pub const VK_FORMAT_FEATURE_2_DISJOINT_BIT_KHR : VkFormatFeatureFlagBits2 = VkFormatFeatureFlagBits2 :: VK_FORMAT_FEATURE_2_DISJOINT_BIT ; } impl VkFormatFeatureFlagBits2 { pub const VK_FORMAT_FEATURE_2_COSITED_CHROMA_SAMPLES_BIT_KHR : VkFormatFeatureFlagBits2 = VkFormatFeatureFlagBits2 :: VK_FORMAT_FEATURE_2_COSITED_CHROMA_SAMPLES_BIT ; } impl VkFormatFeatureFlagBits2 { pub const VK_FORMAT_FEATURE_2_STORAGE_READ_WITHOUT_FORMAT_BIT_KHR : VkFormatFeatureFlagBits2 = VkFormatFeatureFlagBits2 :: VK_FORMAT_FEATURE_2_STORAGE_READ_WITHOUT_FORMAT_BIT ; } impl VkFormatFeatureFlagBits2 { pub const VK_FORMAT_FEATURE_2_STORAGE_WRITE_WITHOUT_FORMAT_BIT_KHR : VkFormatFeatureFlagBits2 = VkFormatFeatureFlagBits2 :: VK_FORMAT_FEATURE_2_STORAGE_WRITE_WITHOUT_FORMAT_BIT ; } impl VkFormatFeatureFlagBits2 { pub const VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_DEPTH_COMPARISON_BIT_KHR : VkFormatFeatureFlagBits2 = VkFormatFeatureFlagBits2 :: VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_DEPTH_COMPARISON_BIT ; }
# [repr (C)] enum VkRenderingFlagBits { VK_RENDERING_CONTENTS_SECONDARY_COMMAND_BUFFERS_BIT , VK_RENDERING_SUSPENDING_BIT , VK_RENDERING_RESUMING_BIT , } impl VkRenderingFlagBits { pub const VK_RENDERING_CONTENTS_SECONDARY_COMMAND_BUFFERS_BIT_KHR : VkRenderingFlagBits = VkRenderingFlagBits :: VK_RENDERING_CONTENTS_SECONDARY_COMMAND_BUFFERS_BIT ; } impl VkRenderingFlagBits { pub const VK_RENDERING_SUSPENDING_BIT_KHR : VkRenderingFlagBits = VkRenderingFlagBits :: VK_RENDERING_SUSPENDING_BIT ; } impl VkRenderingFlagBits { pub const VK_RENDERING_RESUMING_BIT_KHR : VkRenderingFlagBits = VkRenderingFlagBits :: VK_RENDERING_RESUMING_BIT ; }
# [repr (C)] enum VkVideoEncodeH265CapabilityFlagBitsEXT { VK_VIDEO_ENCODE_H265_CAPABILITY_HRD_COMPLIANCE_BIT_EXT , VK_VIDEO_ENCODE_H265_CAPABILITY_PREDICTION_WEIGHT_TABLE_GENERATED_BIT_EXT , VK_VIDEO_ENCODE_H265_CAPABILITY_ROW_UNALIGNED_SLICE_SEGMENT_BIT_EXT , VK_VIDEO_ENCODE_H265_CAPABILITY_DIFFERENT_SLICE_SEGMENT_TYPE_BIT_EXT , VK_VIDEO_ENCODE_H265_CAPABILITY_B_FRAME_IN_L0_LIST_BIT_EXT , VK_VIDEO_ENCODE_H265_CAPABILITY_B_FRAME_IN_L1_LIST_BIT_EXT , VK_VIDEO_ENCODE_H265_CAPABILITY_PER_PICTURE_TYPE_MIN_MAX_QP_BIT_EXT , VK_VIDEO_ENCODE_H265_CAPABILITY_PER_SLICE_SEGMENT_CONSTANT_QP_BIT_EXT , VK_VIDEO_ENCODE_H265_CAPABILITY_MULTIPLE_TILES_PER_SLICE_SEGMENT_BIT_EXT , VK_VIDEO_ENCODE_H265_CAPABILITY_MULTIPLE_SLICE_SEGMENTS_PER_TILE_BIT_EXT , }
# [repr (C)] enum VkVideoEncodeH265StdFlagBitsEXT { VK_VIDEO_ENCODE_H265_STD_SEPARATE_COLOR_PLANE_FLAG_SET_BIT_EXT , VK_VIDEO_ENCODE_H265_STD_SAMPLE_ADAPTIVE_OFFSET_ENABLED_FLAG_SET_BIT_EXT , VK_VIDEO_ENCODE_H265_STD_SCALING_LIST_DATA_PRESENT_FLAG_SET_BIT_EXT , VK_VIDEO_ENCODE_H265_STD_PCM_ENABLED_FLAG_SET_BIT_EXT , VK_VIDEO_ENCODE_H265_STD_SPS_TEMPORAL_MVP_ENABLED_FLAG_SET_BIT_EXT , VK_VIDEO_ENCODE_H265_STD_INIT_QP_MINUS26_BIT_EXT , VK_VIDEO_ENCODE_H265_STD_WEIGHTED_PRED_FLAG_SET_BIT_EXT , VK_VIDEO_ENCODE_H265_STD_WEIGHTED_BIPRED_FLAG_SET_BIT_EXT , VK_VIDEO_ENCODE_H265_STD_LOG2_PARALLEL_MERGE_LEVEL_MINUS2_BIT_EXT , VK_VIDEO_ENCODE_H265_STD_SIGN_DATA_HIDING_ENABLED_FLAG_SET_BIT_EXT , VK_VIDEO_ENCODE_H265_STD_TRANSFORM_SKIP_ENABLED_FLAG_SET_BIT_EXT , VK_VIDEO_ENCODE_H265_STD_TRANSFORM_SKIP_ENABLED_FLAG_UNSET_BIT_EXT , VK_VIDEO_ENCODE_H265_STD_PPS_SLICE_CHROMA_QP_OFFSETS_PRESENT_FLAG_SET_BIT_EXT , VK_VIDEO_ENCODE_H265_STD_TRANSQUANT_BYPASS_ENABLED_FLAG_SET_BIT_EXT , VK_VIDEO_ENCODE_H265_STD_CONSTRAINED_INTRA_PRED_FLAG_SET_BIT_EXT , VK_VIDEO_ENCODE_H265_STD_ENTROPY_CODING_SYNC_ENABLED_FLAG_SET_BIT_EXT , VK_VIDEO_ENCODE_H265_STD_DEBLOCKING_FILTER_OVERRIDE_ENABLED_FLAG_SET_BIT_EXT , VK_VIDEO_ENCODE_H265_STD_DEPENDENT_SLICE_SEGMENTS_ENABLED_FLAG_SET_BIT_EXT , VK_VIDEO_ENCODE_H265_STD_DEPENDENT_SLICE_SEGMENT_FLAG_SET_BIT_EXT , }
# [repr (C)] enum VkVideoEncodeH265RateControlFlagBitsEXT { VK_VIDEO_ENCODE_H265_RATE_CONTROL_ATTEMPT_HRD_COMPLIANCE_BIT_EXT , VK_VIDEO_ENCODE_H265_RATE_CONTROL_REGULAR_GOP_BIT_EXT , VK_VIDEO_ENCODE_H265_RATE_CONTROL_REFERENCE_PATTERN_FLAT_BIT_EXT , VK_VIDEO_ENCODE_H265_RATE_CONTROL_REFERENCE_PATTERN_DYADIC_BIT_EXT , VK_VIDEO_ENCODE_H265_RATE_CONTROL_TEMPORAL_SUB_LAYER_PATTERN_DYADIC_BIT_EXT , }
# [repr (C)] enum VkVideoEncodeH265CtbSizeFlagBitsEXT { VK_VIDEO_ENCODE_H265_CTB_SIZE_16_BIT_EXT , VK_VIDEO_ENCODE_H265_CTB_SIZE_32_BIT_EXT , VK_VIDEO_ENCODE_H265_CTB_SIZE_64_BIT_EXT , }
# [repr (C)] enum VkVideoEncodeH265TransformBlockSizeFlagBitsEXT { VK_VIDEO_ENCODE_H265_TRANSFORM_BLOCK_SIZE_4_BIT_EXT , VK_VIDEO_ENCODE_H265_TRANSFORM_BLOCK_SIZE_8_BIT_EXT , VK_VIDEO_ENCODE_H265_TRANSFORM_BLOCK_SIZE_16_BIT_EXT , VK_VIDEO_ENCODE_H265_TRANSFORM_BLOCK_SIZE_32_BIT_EXT , }
# [repr (C)] enum VkExportMetalObjectTypeFlagBitsEXT { VK_EXPORT_METAL_OBJECT_TYPE_METAL_DEVICE_BIT_EXT , VK_EXPORT_METAL_OBJECT_TYPE_METAL_COMMAND_QUEUE_BIT_EXT , VK_EXPORT_METAL_OBJECT_TYPE_METAL_BUFFER_BIT_EXT , VK_EXPORT_METAL_OBJECT_TYPE_METAL_TEXTURE_BIT_EXT , VK_EXPORT_METAL_OBJECT_TYPE_METAL_IOSURFACE_BIT_EXT , VK_EXPORT_METAL_OBJECT_TYPE_METAL_SHARED_EVENT_BIT_EXT , }

# [repr (C)] enum VkImageCompressionFlagBitsEXT { VK_IMAGE_COMPRESSION_DEFAULT_EXT = 0 , VK_IMAGE_COMPRESSION_FIXED_RATE_DEFAULT_EXT , VK_IMAGE_COMPRESSION_FIXED_RATE_EXPLICIT_EXT , VK_IMAGE_COMPRESSION_DISABLED_EXT , }
# [repr (C)] enum VkImageCompressionFixedRateFlagBitsEXT { VK_IMAGE_COMPRESSION_FIXED_RATE_NONE_EXT = 0 , VK_IMAGE_COMPRESSION_FIXED_RATE_1BPC_BIT_EXT , VK_IMAGE_COMPRESSION_FIXED_RATE_2BPC_BIT_EXT , VK_IMAGE_COMPRESSION_FIXED_RATE_3BPC_BIT_EXT , VK_IMAGE_COMPRESSION_FIXED_RATE_4BPC_BIT_EXT , VK_IMAGE_COMPRESSION_FIXED_RATE_5BPC_BIT_EXT , VK_IMAGE_COMPRESSION_FIXED_RATE_6BPC_BIT_EXT , VK_IMAGE_COMPRESSION_FIXED_RATE_7BPC_BIT_EXT , VK_IMAGE_COMPRESSION_FIXED_RATE_8BPC_BIT_EXT , VK_IMAGE_COMPRESSION_FIXED_RATE_9BPC_BIT_EXT , VK_IMAGE_COMPRESSION_FIXED_RATE_10BPC_BIT_EXT , VK_IMAGE_COMPRESSION_FIXED_RATE_11BPC_BIT_EXT , VK_IMAGE_COMPRESSION_FIXED_RATE_12BPC_BIT_EXT , VK_IMAGE_COMPRESSION_FIXED_RATE_13BPC_BIT_EXT , VK_IMAGE_COMPRESSION_FIXED_RATE_14BPC_BIT_EXT , VK_IMAGE_COMPRESSION_FIXED_RATE_15BPC_BIT_EXT , VK_IMAGE_COMPRESSION_FIXED_RATE_16BPC_BIT_EXT , VK_IMAGE_COMPRESSION_FIXED_RATE_17BPC_BIT_EXT , VK_IMAGE_COMPRESSION_FIXED_RATE_18BPC_BIT_EXT , VK_IMAGE_COMPRESSION_FIXED_RATE_19BPC_BIT_EXT , VK_IMAGE_COMPRESSION_FIXED_RATE_20BPC_BIT_EXT , VK_IMAGE_COMPRESSION_FIXED_RATE_21BPC_BIT_EXT , VK_IMAGE_COMPRESSION_FIXED_RATE_22BPC_BIT_EXT , VK_IMAGE_COMPRESSION_FIXED_RATE_23BPC_BIT_EXT , VK_IMAGE_COMPRESSION_FIXED_RATE_24BPC_BIT_EXT , }
# [repr (C)] enum VkPipelineRobustnessBufferBehaviorEXT { VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_DEVICE_DEFAULT_EXT = 0 , VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_DISABLED_EXT = 1 , VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_ROBUST_BUFFER_ACCESS_EXT = 2 , VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_ROBUST_BUFFER_ACCESS_2_EXT = 3 , }
# [repr (C)] enum VkPipelineRobustnessImageBehaviorEXT { VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_DEVICE_DEFAULT_EXT = 0 , VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_DISABLED_EXT = 1 , VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_ROBUST_IMAGE_ACCESS_EXT = 2 , VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_ROBUST_IMAGE_ACCESS_2_EXT = 3 , }
# [repr (C)] enum VkOpticalFlowGridSizeFlagBitsNV { VK_OPTICAL_FLOW_GRID_SIZE_UNKNOWN_NV = 0 , VK_OPTICAL_FLOW_GRID_SIZE_1X1_BIT_NV , VK_OPTICAL_FLOW_GRID_SIZE_2X2_BIT_NV , VK_OPTICAL_FLOW_GRID_SIZE_4X4_BIT_NV , VK_OPTICAL_FLOW_GRID_SIZE_8X8_BIT_NV , }
# [repr (C)] enum VkOpticalFlowUsageFlagBitsNV { VK_OPTICAL_FLOW_USAGE_UNKNOWN_NV = 0 , VK_OPTICAL_FLOW_USAGE_INPUT_BIT_NV , VK_OPTICAL_FLOW_USAGE_OUTPUT_BIT_NV , VK_OPTICAL_FLOW_USAGE_HINT_BIT_NV , VK_OPTICAL_FLOW_USAGE_COST_BIT_NV , VK_OPTICAL_FLOW_USAGE_GLOBAL_FLOW_BIT_NV , }
# [repr (C)] enum VkOpticalFlowPerformanceLevelNV { VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_UNKNOWN_NV = 0 , VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_SLOW_NV = 1 , VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_MEDIUM_NV = 2 , VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_FAST_NV = 3 , }
# [repr (C)] enum VkOpticalFlowSessionBindingPointNV { VK_OPTICAL_FLOW_SESSION_BINDING_POINT_UNKNOWN_NV = 0 , VK_OPTICAL_FLOW_SESSION_BINDING_POINT_INPUT_NV = 1 , VK_OPTICAL_FLOW_SESSION_BINDING_POINT_REFERENCE_NV = 2 , VK_OPTICAL_FLOW_SESSION_BINDING_POINT_HINT_NV = 3 , VK_OPTICAL_FLOW_SESSION_BINDING_POINT_FLOW_VECTOR_NV = 4 , VK_OPTICAL_FLOW_SESSION_BINDING_POINT_BACKWARD_FLOW_VECTOR_NV = 5 , VK_OPTICAL_FLOW_SESSION_BINDING_POINT_COST_NV = 6 , VK_OPTICAL_FLOW_SESSION_BINDING_POINT_BACKWARD_COST_NV = 7 , VK_OPTICAL_FLOW_SESSION_BINDING_POINT_GLOBAL_FLOW_NV = 8 , }
# [repr (C)] enum VkOpticalFlowSessionCreateFlagBitsNV { VK_OPTICAL_FLOW_SESSION_CREATE_ENABLE_HINT_BIT_NV , VK_OPTICAL_FLOW_SESSION_CREATE_ENABLE_COST_BIT_NV , VK_OPTICAL_FLOW_SESSION_CREATE_ENABLE_GLOBAL_FLOW_BIT_NV , VK_OPTICAL_FLOW_SESSION_CREATE_ALLOW_REGIONS_BIT_NV , VK_OPTICAL_FLOW_SESSION_CREATE_BOTH_DIRECTIONS_BIT_NV , }
# [repr (C)] enum VkOpticalFlowExecuteFlagBitsNV { VK_OPTICAL_FLOW_EXECUTE_DISABLE_TEMPORAL_HINTS_BIT_NV , }
# [repr (C)] enum VkMicromapTypeEXT { VK_MICROMAP_TYPE_OPACITY_MICROMAP_EXT = 0 , }
# [repr (C)] enum VkBuildMicromapFlagBitsEXT { VK_BUILD_MICROMAP_PREFER_FAST_TRACE_BIT_EXT , VK_BUILD_MICROMAP_PREFER_FAST_BUILD_BIT_EXT , VK_BUILD_MICROMAP_ALLOW_COMPACTION_BIT_EXT , }
# [repr (C)] enum VkMicromapCreateFlagBitsEXT { VK_MICROMAP_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_EXT , }
# [repr (C)] enum VkCopyMicromapModeEXT { VK_COPY_MICROMAP_MODE_CLONE_EXT = 0 , VK_COPY_MICROMAP_MODE_SERIALIZE_EXT = 1 , VK_COPY_MICROMAP_MODE_DESERIALIZE_EXT = 2 , VK_COPY_MICROMAP_MODE_COMPACT_EXT = 3 , }
# [repr (C)] enum VkBuildMicromapModeEXT { VK_BUILD_MICROMAP_MODE_BUILD_EXT = 0 , }
# [repr (C)] enum VkOpacityMicromapFormatEXT { VK_OPACITY_MICROMAP_FORMAT_2_STATE_EXT = 1 , VK_OPACITY_MICROMAP_FORMAT_4_STATE_EXT = 2 , }
# [repr (C)] enum VkOpacityMicromapSpecialIndexEXT { VK_OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_TRANSPARENT_EXT = - 1 , VK_OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_OPAQUE_EXT = - 2 , VK_OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_UNKNOWN_TRANSPARENT_EXT = - 3 , VK_OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_UNKNOWN_OPAQUE_EXT = - 4 , }
# [repr (C)] enum VkDeviceFaultAddressTypeEXT { VK_DEVICE_FAULT_ADDRESS_TYPE_NONE_EXT = 0 , VK_DEVICE_FAULT_ADDRESS_TYPE_READ_INVALID_EXT = 1 , VK_DEVICE_FAULT_ADDRESS_TYPE_WRITE_INVALID_EXT = 2 , VK_DEVICE_FAULT_ADDRESS_TYPE_EXECUTE_INVALID_EXT = 3 , VK_DEVICE_FAULT_ADDRESS_TYPE_INSTRUCTION_POINTER_UNKNOWN_EXT = 4 , VK_DEVICE_FAULT_ADDRESS_TYPE_INSTRUCTION_POINTER_INVALID_EXT = 5 , VK_DEVICE_FAULT_ADDRESS_TYPE_INSTRUCTION_POINTER_FAULT_EXT = 6 , }
# [repr (C)] enum VkDeviceFaultVendorBinaryHeaderVersionEXT { VK_DEVICE_FAULT_VENDOR_BINARY_HEADER_VERSION_ONE_EXT = 1 , }
# [repr (C)] enum VkDisplacementMicromapFormatNV { VK_DISPLACEMENT_MICROMAP_FORMAT_64_TRIANGLES_64_BYTES_NV = 1 , VK_DISPLACEMENT_MICROMAP_FORMAT_256_TRIANGLES_128_BYTES_NV = 2 , VK_DISPLACEMENT_MICROMAP_FORMAT_1024_TRIANGLES_128_BYTES_NV = 3 , }
# [repr (C)] enum VkShaderCreateFlagBitsEXT { VK_SHADER_CREATE_LINK_STAGE_BIT_EXT , }
# [repr (C)] enum VkShaderCodeTypeEXT { VK_SHADER_CODE_TYPE_BINARY_EXT = 0 , VK_SHADER_CODE_TYPE_SPIRV_EXT = 1 , }
